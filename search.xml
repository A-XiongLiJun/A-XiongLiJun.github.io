<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试题</title>
      <link href="2021/12/22/mian-shi-ti/"/>
      <url>2021/12/22/mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h5 id="Vue-组件中的-data-为什么是一个函数"><a href="#Vue-组件中的-data-为什么是一个函数" class="headerlink" title="Vue 组件中的 data 为什么是一个函数?"></a>Vue 组件中的 data 为什么是一个函数?</h5><p>一个组件被使用多次，用的都是同一个构造函数。为了保证组件的不同的实例 data 不冲突，要求 data 必须是一个函数，这样组件间不会相互影响 or 可以保证组件的每一次调用都是创建一个新对象，组件之间不会产生影响；</p><h5 id="ssr-是什么"><a href="#ssr-是什么" class="headerlink" title="ssr 是什么"></a>ssr 是什么</h5><p>服务端渲染</p><h5 id="什么是-SPA"><a href="#什么是-SPA" class="headerlink" title="什么是 SPA"></a>什么是 SPA</h5><p>SPA 是单页面应用程序，vue react angular 都是,整个项目只有一个页面；局部刷新而来；</p><h5 id="vue-router-有哪几种路由守卫"><a href="#vue-router-有哪几种路由守卫" class="headerlink" title="vue-router 有哪几种路由守卫?"></a>vue-router 有哪几种路由守卫?</h5><p>路由守卫为：<br>全局前置守卫：beforeEach<br>后置守卫/全局后置钩子：afterEach<br>全局解析守卫：beforeResolve<br>路由独享守卫：beforeEnter</p><h5 id="route-和-router-的区别是什么？"><a href="#route-和-router-的区别是什么？" class="headerlink" title="$route 和 $router 的区别是什么？"></a>$route 和 $router 的区别是什么？</h5><p>$router 为 VueRouter 的实例，是一个全局路由对象，包含了路由跳转的方法、钩子函数等。</p><p>$route 是路由信息对象||跳转的路由对象，每一个路由都会有一个 route 对象，是一个局部对象，包含 path,params,hash,query,fullPath,matched,name 等路由信息参数。</p><h5 id="不用-Vuex-会带来什么问题？"><a href="#不用-Vuex-会带来什么问题？" class="headerlink" title="不用 Vuex 会带来什么问题？"></a>不用 Vuex 会带来什么问题？</h5><ol><li>可维护性会下降，你要想修改数据，你得维护三个地方</li><li>可读性会下降，因为一个组件里的数据，你根本就看不出来是从哪来的</li><li>增加耦合，大量的上传派发，会让耦合性大大的增加，本来 Vue 用 Component 就是为了减少耦合，现在这么用，和组件化的初衷相背。</li></ol><h5 id="vuex-有哪几种属性？"><a href="#vuex-有哪几种属性？" class="headerlink" title="vuex 有哪几种属性？"></a>vuex 有哪几种属性？</h5><p>State、 Getter、Mutation 、Action、 Module。</p><h5 id="vuex-的-State-特性是？"><a href="#vuex-的-State-特性是？" class="headerlink" title="vuex 的 State 特性是？"></a>vuex 的 State 特性是？</h5><ol><li>Vuex 就是一个仓库，仓库里面放了很多对象。其中 state 就是数据源存放地，对应于与一般 Vue 对象里面的 data</li><li>state 里面存放的数据是响应式的，Vue 组件从 store 中读取数据，若是 store 中的数据发生改变，依赖这个数据的组件也会发生更新</li><li>它通过 mapState 把全局的 state 和 getters 映射到当前组件的 computed 计算属性中</li></ol><h5 id="vuex-的-Getter-特性是？"><a href="#vuex-的-Getter-特性是？" class="headerlink" title="vuex 的 Getter 特性是？"></a>vuex 的 Getter 特性是？</h5><ol><li>getters 可以对 State 进行计算操作，它就是 Store 的计算属性</li><li>虽然在组件内也可以做计算属性，但是 getters 可以在多组件之间复用</li><li>如果一个状态只在一个组件内使用，是可以不用 getters</li></ol><h5 id="vuex-的-Mutation-特性是？"><a href="#vuex-的-Mutation-特性是？" class="headerlink" title="vuex 的 Mutation 特性是？"></a>vuex 的 Mutation 特性是？</h5><ol><li>Action 类似于 mutation，不同在于：</li><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作</li></ol><h5 id="Vue-js-中-ajax-请求代码应该写在组件的-methods-中还是-vuex-的-actions-中？"><a href="#Vue-js-中-ajax-请求代码应该写在组件的-methods-中还是-vuex-的-actions-中？" class="headerlink" title="Vue.js 中 ajax 请求代码应该写在组件的 methods 中还是 vuex 的 actions 中？"></a>Vue.js 中 ajax 请求代码应该写在组件的 methods 中还是 vuex 的 actions 中？</h5><ol><li>如果请求来的数据是不是要被其他组件公用，仅仅在请求的组件内使用，就不需要放入 vuex 的 state 里。</li><li>如果被其他地方复用，这个很大几率上是需要的，如果需要，请将请求放入 action 里，方便复用，并包装成 promise 返回，在调用处用 async await 处理返回的数据。如果不要复用这个请求，那么直接写在 vue 文件里很方便。</li></ol><h5 id="简述深浅拷贝"><a href="#简述深浅拷贝" class="headerlink" title="简述深浅拷贝"></a>简述深浅拷贝</h5><p>浅拷贝<br>通常需要拷贝的对象内部只有一层的这种对象。<br>常用的方法</p><ol><li>Object.assign 方法来实现</li><li>扩展运算符 …obj</li></ol><p>深拷贝<br>通常是嵌套二层或以上的复杂对象<br>常用方法</p><ol><li>JSON.parse(JSON.stringfy(object)); 该方法忽略掉 undefined、忽略 Symbol、忽略 function。只适合简单深拷贝</li><li>手写递归方法去实现。</li><li>通过第三方库提供的深拷贝实现。</li></ol><h5 id="函数的节流和防抖"><a href="#函数的节流和防抖" class="headerlink" title="函数的节流和防抖"></a>函数的节流和防抖</h5><p>防抖函数：将多次触发变成最后一次触发；<br>节流函数：将多次执行变成每隔一个时间节点去执行的函数</p><h5 id="箭头函数和普通函数的区别是什么？"><a href="#箭头函数和普通函数的区别是什么？" class="headerlink" title="箭头函数和普通函数的区别是什么？"></a>箭头函数和普通函数的区别是什么？</h5><p>普通函数 this：</p><ol><li>this 总是代表它的直接调用者。</li><li>在默认情况下，没找到直接调用者，this 指的是 window。</li><li>在严格模式下，没有直接调用者的函数中的 this 是 undefined。</li><li>使用 call,apply,bind 绑定，this 指的是绑定的对象。</li></ol><p>箭头函数 this：</p><ol><li><p>在使用=&gt;定义函数的时候，this 的指向是 定义时所在的对象，而不是使用时所在的对象；</p></li><li><p>不能够用作构造函数，这就是说，不能够使用 new 命令，否则就会抛出一个错误；</p></li><li><p>不能够使用 arguments 对象；</p></li><li><p>不能使用 yield 命令；</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> text </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监听数组变化</title>
      <link href="2021/12/22/jian-ting-shu-zu-dui-xiang-bian-hua/"/>
      <url>2021/12/22/jian-ting-shu-zu-dui-xiang-bian-hua/</url>
      
        <content type="html"><![CDATA[<h5 id="利用-Vue-中-keep-alive，快速实现页面缓存"><a href="#利用-Vue-中-keep-alive，快速实现页面缓存" class="headerlink" title="利用 Vue 中 keep-alive，快速实现页面缓存"></a>利用 Vue 中 keep-alive，快速实现页面缓存</h5><p>Vue 中 watch 无法直接监听数组里面对象键所对应值的变化 暂不考虑 deep true</p><pre class=" language-javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token string">'signalLevel'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 每次获取对象的这个属性的时候，就会被这个get方法给劫持到</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get执行了'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 每次设置这个对象的属性的时候，就会被set方法劫持到</span>  <span class="token comment" spellcheck="true">// 设置的值也会劫持到</span>  <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'set方法执行了'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环定时器</title>
      <link href="2021/12/22/xun-huan-ding-shi-qi/"/>
      <url>2021/12/22/xun-huan-ding-shi-qi/</url>
      
        <content type="html"><![CDATA[<p>从 1 开始每一秒打印一个数，打印到 10 时停止</p><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token number">1000</span> <span class="token operator">*</span> i  <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ;可写可不写</span>  <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token operator">*</span> i<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圣杯布局</title>
      <link href="2021/12/22/sheng-bei-bu-ju/"/>
      <url>2021/12/22/sheng-bei-bu-ju/</url>
      
        <content type="html"><![CDATA[<p>中间盒子优先渲染，两边的盒子框子宽度固定不变，即使页面宽度变小，也不影响我们的浏览。<strong>注意：为了安全起见，最好还是给body加一个最小宽度!</strong> </p><h3 id="圣杯布局要求"><a href="#圣杯布局要求" class="headerlink" title="圣杯布局要求"></a>圣杯布局要求</h3><ul><li>header和footer各自占领屏幕所有宽度，高度固定。</li><li>中间的container是一个三栏布局。</li><li>三栏布局两侧宽度固定不变，中间部分自动填充整个区域。</li><li>中间部分的高度是三栏中最高的区域的高度</li></ul><h3 id="圣杯布局的三种实现"><a href="#圣杯布局的三种实现" class="headerlink" title="圣杯布局的三种实现"></a>圣杯布局的三种实现</h3><h4 id="【1】浮动"><a href="#【1】浮动" class="headerlink" title="【1】浮动"></a><strong>【1】浮动</strong></h4><ul><li>先定义好header和footer的样式，使之横向撑满。</li><li>在container中的三列设为浮动和相对定位(后面会用到)，center要放在最前面，footer清除浮动。</li><li>三列的左右两列分别定宽200px和150px，中间部分center设置100%撑满</li><li>这样因为浮动的关系，center会占据整个container，左右两块区域被挤下去了</li><li>接下来设置left的 <code>margin-left: -100%;</code>，让left回到上一行最左侧</li><li>但这会把center给遮住了，所以这时给外层的container设置 <code>padding-left: 200px;padding-right: 150px;</code>，给left和right空出位置</li><li>这时left并没有在最左侧，因为之前已经设置过相对定位，所以通过 <code>left: -200px;</code> 把left拉回最左侧</li><li>同样的，对于right区域，设置 <code>margin-right: -150px;</code> 把right拉回第一行</li><li>这时右侧空出了150px的空间，所以最后设置 right: -150px;把right区域拉到最右侧就行了。</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">550</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 2x leftContent width + rightContent width */</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#header</span>, <span class="token id">#footer</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">29</span>, <span class="token number">27</span>, <span class="token number">27</span>, <span class="token number">0.726</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#footer</span> </span><span class="token punctuation">{</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#container</span> </span><span class="token punctuation">{</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* leftContent width */</span>    <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* rightContent width */</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#container</span> <span class="token class">.column</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#center</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">206</span>, <span class="token number">201</span>, <span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#left</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">/* leftContent width */</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">/* leftContent width */</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">95</span>, <span class="token number">179</span>, <span class="token number">235</span>, <span class="token number">0.972</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#right</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">/* rightContent width */</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> -<span class="token number">150</span>px<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* rightContent width */</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">231</span>, <span class="token number">105</span>, <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#center<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="【2】flex弹性盒子"><a href="#【2】flex弹性盒子" class="headerlink" title="【2】flex弹性盒子"></a><strong>【2】flex弹性盒子</strong></h4><ul><li>header和footer设置样式，横向撑满。</li><li>container中的left、center、right依次排布即可</li><li>给container设置弹性布局 <code>display: flex;</code></li><li>left和right区域定宽，center设置 <code>flex: 1;</code> 即可</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">550</span>px<span class="token punctuation">;</span>      <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#header</span>, <span class="token id">#footer</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">29</span>, <span class="token number">27</span>, <span class="token number">27</span>, <span class="token number">0.726</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#container</span> </span><span class="token punctuation">{</span>   <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#container</span> <span class="token class">.column</span> </span><span class="token punctuation">{</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#center</span> </span><span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">206</span>, <span class="token number">201</span>, <span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#left</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">95</span>, <span class="token number">179</span>, <span class="token number">235</span>, <span class="token number">0.972</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#right</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>               <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">231</span>, <span class="token number">105</span>, <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#center<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="【3】grid网格布局"><a href="#【3】grid网格布局" class="headerlink" title="【3】grid网格布局"></a><strong>【3】grid网格布局</strong></h4><ul><li>给body元素添加<code>display: grid;</code>属性变成一个grid(网格)</li><li>给header元素设置grid-row: 1; 和 grid-column: 1/5; 意思是占据第一行网格的从第一条列网格线开始到第五条列网格线结束</li><li>给footer元素设置grid-row: 1; 和 grid-column: 1/5; 意思是占据第三行网格的从第一条列网格线开始到第五条列网格线结束</li><li>给left元素设置grid-row: 2; 和 grid-column: 1/2; 意思是占据第二行网格的从第一条列网格线开始到第二条列网格线结束</li><li>给center元素设置grid-row: 2; 和 grid-column: 2/4; 意思是占据第二行网格的从第二条列网格线开始到第四条列网格线结束</li><li>给right元素设置grid-row: 2; 和 grid-column: 4/5; 意思是占据第二行网格的从第四条列网格线开始到第五条列网格线结束</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">550</span>px<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#header</span>,  <span class="token id">#footer</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">29</span>, <span class="token number">27</span>, <span class="token number">27</span>, <span class="token number">0.726</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#header</span> </span><span class="token punctuation">{</span>    <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span>/<span class="token number">5</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#footer</span> </span><span class="token punctuation">{</span>    <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span>/<span class="token number">5</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.column</span> </span><span class="token punctuation">{</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#left</span> </span><span class="token punctuation">{</span>    <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">1</span>/<span class="token number">2</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">95</span>, <span class="token number">179</span>, <span class="token number">235</span>, <span class="token number">0.972</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#center</span> </span><span class="token punctuation">{</span>    <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">2</span>/<span class="token number">4</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">206</span>, <span class="token number">201</span>, <span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#right</span> </span><span class="token punctuation">{</span>    <span class="token property">grid-row</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token property">grid-column</span><span class="token punctuation">:</span> <span class="token number">4</span>/<span class="token number">5</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">231</span>, <span class="token number">105</span>, <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#header<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#center<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>#footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 圣杯布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改头像</title>
      <link href="2021/12/22/xiu-gai-tou-xiang/"/>
      <url>2021/12/22/xiu-gai-tou-xiang/</url>
      
        <content type="html"><![CDATA[<h3 id="修改头像"><a href="#修改头像" class="headerlink" title="修改头像"></a>修改头像</h3><h4 id="1-图片上传预览"><a href="#1-图片上传预览" class="headerlink" title="1 图片上传预览"></a>1 图片上传预览</h4><ol><li><p>在页面中添加 <code>input</code> 上传框</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> hidden ref<span class="token operator">=</span><span class="token string">"file"</span> <span class="token operator">></span></code></pre></li><li><p>点击头像显示上传获取<code>input</code> 对象</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 个人信息 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>van<span class="token operator">-</span>cell title<span class="token operator">=</span><span class="token string">"头像"</span> is<span class="token operator">-</span>link @click<span class="token operator">=</span><span class="token string">"$refs.file.click()"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>van<span class="token operator">-</span>image <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"avatar"</span> fit<span class="token operator">=</span><span class="token string">"cover"</span> round <span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"user.photo"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>cell<span class="token operator">></span></code></pre></li><li><p>给 <code>input</code> 上传框绑定 <code>onChange</code> 事件，触发事件处理程序 <code>onFileChange</code></p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> hidden ref<span class="token operator">=</span><span class="token string">"file"</span> @change<span class="token operator">=</span><span class="token string">"onFileChange"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 更新头像</span><span class="token function">onFileChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取文件对象</span>  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>file<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 基于文章对象获取到 blob 数据</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>刷新页面，查看是否获取到 <code>blob</code> 数据</p></li></ol><h4 id="2-用户上传弹框处理"><a href="#2-用户上传弹框处理" class="headerlink" title="2 用户上传弹框处理"></a>2 用户上传弹框处理</h4><ol><li><p>准备弹出层</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 编辑头像 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>van<span class="token operator">-</span>popup v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"isUpdatePhotoShow"</span> position<span class="token operator">=</span><span class="token string">"bottom"</span> style<span class="token operator">=</span><span class="token string">"height: 100%;"</span><span class="token operator">></span>编辑头像<span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>popup<span class="token operator">></span></code></pre></li><li><p>在 <code>data</code> 中声明 <code>isUpdatePhotoShow</code> 属性，控制弹框的显示状态</p><pre class=" language-js"><code class="language-js"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    isUpdatePhotoShow<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 控制修改头像的弹框</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>在获取上传图片的内容后，让弹框显示</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 更新头像</span><span class="token function">onFileChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token comment" spellcheck="true">// 展示预览图片弹出层</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>isUpdatePhotoShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre></li><li><p>刷新页面，查看弹框是否展示</p></li></ol><h4 id="3-准备组件，图片上传预览"><a href="#3-准备组件，图片上传预览" class="headerlink" title="3 准备组件，图片上传预览"></a>3 准备组件，图片上传预览</h4><ol><li><p>在 <code>views\user-profile\components\update-photo.vue</code> 组件中创建组件</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"update-photo"</span><span class="token operator">></span>图片上传预览<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'UpdatePhoto'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped lang<span class="token operator">=</span><span class="token string">"less"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre></li><li><p>在 <code>views\user-profile\index.vue</code> 组件中导入 <code>update-photo.vue</code> 组件</p><ul><li><p>导入组件</p></li><li><p>挂载组件</p></li><li><p>使用组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> UpdatePhoto <span class="token keyword">from</span> <span class="token string">'./components/update-photo'</span></code></pre><pre class=" language-js"><code class="language-js">components<span class="token punctuation">:</span> <span class="token punctuation">{</span>UpdatePhoto<span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 编辑头像 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>van<span class="token operator">-</span>popup v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"isUpdatePhotoShow"</span> position<span class="token operator">=</span><span class="token string">"bottom"</span> style<span class="token operator">=</span><span class="token string">"height: 100%;"</span><span class="token operator">></span><span class="token operator">&lt;</span>update<span class="token operator">-</span>photo v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"isUpdatePhotoShow"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>popup<span class="token operator">></span></code></pre></li></ul></li><li><p>将父组件中获取到的图片信息赋值给 <code>data</code> 中的 <code>img</code> 属性并传递到 <code>update-photo.vue</code> 组件中</p><pre class=" language-js"><code class="language-js"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    img<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// 预览的图片</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 更新头像</span><span class="token function">onFileChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取文件对象</span>  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>file<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 基于文章对象获取到 blob 数据</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>img <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 展示预览图片弹出层</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>isUpdatePhotoShow <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment" spellcheck="true">// file-input 如果选了同一个文件不会触发 change 事件</span>  <span class="token comment" spellcheck="true">// 解决办法就是每次使用完毕，把它的 value 清空</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>file<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 编辑头像 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>van<span class="token operator">-</span>popup v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"isUpdatePhotoShow"</span> position<span class="token operator">=</span><span class="token string">"bottom"</span> style<span class="token operator">=</span><span class="token string">"height: 100%;"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>update<span class="token operator">-</span>photo v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"isUpdatePhotoShow"</span> <span class="token punctuation">:</span>img<span class="token operator">=</span><span class="token string">"img"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>popup<span class="token operator">></span></code></pre></li><li><p>在子组件中使用 <code>props</code> 接收到传递的数据，并渲染到组件中</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'UpdatePhoto'</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    img<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Object<span class="token punctuation">]</span><span class="token punctuation">,</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"update-photo"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"img"</span> <span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"img"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre></li><li><p> 刷新页面，上传头像，查看预览效果</p></li></ol><h4 id="4-样式处理"><a href="#4-样式处理" class="headerlink" title="4 样式处理"></a>4 样式处理</h4><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"update-photo"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"img"</span> <span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"img"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"toolbar"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cancel"</span><span class="token operator">></span>取消<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"confirm"</span><span class="token operator">></span>完成<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">// ...</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped lang<span class="token operator">=</span><span class="token string">"less"</span><span class="token operator">></span><span class="token punctuation">.</span>update<span class="token operator">-</span>photo <span class="token punctuation">{</span>  background<span class="token operator">-</span>color<span class="token punctuation">:</span> #<span class="token number">000</span><span class="token punctuation">;</span>  height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span>toolbar <span class="token punctuation">{</span>    position<span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    left<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    right<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    bottom<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    justify<span class="token operator">-</span>content<span class="token punctuation">:</span> space<span class="token operator">-</span>between<span class="token punctuation">;</span>    <span class="token punctuation">.</span>cancel<span class="token punctuation">,</span>    <span class="token punctuation">.</span>confirm <span class="token punctuation">{</span>      width<span class="token punctuation">:</span> 90px<span class="token punctuation">;</span>      height<span class="token punctuation">:</span> 90px<span class="token punctuation">;</span>      font<span class="token operator">-</span>size<span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>      display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>      justify<span class="token operator">-</span>content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>      align<span class="token operator">-</span>items<span class="token punctuation">:</span> center<span class="token punctuation">;</span>      color<span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span>img <span class="token punctuation">{</span>  display<span class="token punctuation">:</span> block<span class="token punctuation">;</span>  max<span class="token operator">-</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h4 id="5-头像裁剪"><a href="#5-头像裁剪" class="headerlink" title="5 头像裁剪"></a>5 头像裁剪</h4><ol><li><p>方案一：结合服务端的图片裁切上传流程</p></li><li><p>方案二：纯客户端的图片裁切上传流程</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/file">&lt;input type=”file”&gt;</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File/Using_files_from_web_applications">在 web 应用程序中使用文件</a></li></ul><pre class=" language-js"><code class="language-js">viewMode<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>dragMode<span class="token punctuation">:</span> <span class="token string">'move'</span><span class="token punctuation">,</span>aspectRatio<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>autoCropArea<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>cropBoxMovable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>cropBoxResizable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>background<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>movable<span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre></li><li><p>图片裁切，安装第三方依赖</p><pre class=" language-js"><code class="language-js">cnpm install cropperjs <span class="token operator">-</span>s</code></pre></li><li><p>在 <code>update-photo.vue</code> 组件中导入 <code>cropperjs</code> 脚本</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">'cropperjs/dist/cropper.css'</span><span class="token keyword">import</span> Cropper <span class="token keyword">from</span> <span class="token string">'cropperjs'</span></code></pre></li><li><p>在 <code>mounted</code> 钩子函数中调用 <code>Cropper</code> 提供的方法</p><pre class=" language-js"><code class="language-js"><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> image <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>img  <span class="token keyword">const</span> cropper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cropper</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">{</span>    aspectRatio<span class="token punctuation">:</span> <span class="token number">16</span> <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">,</span>    <span class="token function">crop</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>x<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>y<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>width<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>height<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>rotate<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>scaleX<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>scaleY<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cropper<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>刷新页面，查看裁剪效果</p></li></ol><h4 id="6-图片裁剪"><a href="#6-图片裁剪" class="headerlink" title="6 图片裁剪"></a>6 图片裁剪</h4><ol><li><p>如果是基于服务端的裁切，则使用：<a href="https://github.com/fengyuanchen/cropperjs#getdatarounded">getData</a> 方法，该方法得到裁切的区域参数</p></li><li><p>如果是纯客户端的图片裁切，则使用：<a href="https://github.com/fengyuanchen/cropperjs#getcroppedcanvasoptions">getCroppedCanvas</a> 方法，该方法得到裁切之后的图片对象（类似于<code>URL.createObjectURL</code> 方法得到的文件对象）</p></li><li><p>步骤：</p><ul><li>封装接口</li><li>请求提交</li><li>更新视图</li></ul></li><li><p>给完成按钮绑定点击事件</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"toolbar"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cancel"</span> @click<span class="token operator">=</span><span class="token string">"$emit('close')"</span><span class="token operator">></span>取消<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"confirm"</span> @click<span class="token operator">=</span><span class="token string">"onConfirm"</span><span class="token operator">></span>完成<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre></li><li><p>在 <code>onConfirm</code> 事件处理程序中取裁切参数对象</p><pre class=" language-js"><code class="language-js"><span class="token function">onConfirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 基于服务端的裁切使用 getData 方法获取裁切参数</span>  <span class="token comment" spellcheck="true">// console.log(this.cropper.getData())</span>  <span class="token comment" spellcheck="true">// 纯客户端的裁切使用 getCroppedCanvas 获取裁切的文件对象</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>cropper<span class="token punctuation">.</span><span class="token function">getCroppedCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBlob</span><span class="token punctuation">(</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>刷新页面，查看裁切结果</p></li></ol><h4 id="7-保存更新"><a href="#7-保存更新" class="headerlink" title="7 保存更新"></a>7 保存更新</h4><ol><li><p>封装发送 <code>ajax</code> 请求的方法</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 更新用户照片资料</span><span class="token keyword">export</span> <span class="token keyword">const</span> updateUserPhoto <span class="token operator">=</span> data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    method<span class="token punctuation">:</span> <span class="token string">'PATCH'</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span> <span class="token string">'/app/v1_0/user/photo'</span><span class="token punctuation">,</span>    data<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>在 <code>update-photo.vue</code> 组件中导入封装的接口方法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> updateUserPhoto <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/api/user'</span></code></pre></li><li><p>点击完成后发送接口请求</p><pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token function">updateUserPhoto</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$toast<span class="token punctuation">.</span><span class="token function">loading</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">'保存中...'</span><span class="token punctuation">,</span>    forbidClick<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 禁止背景点击</span>    duration<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 持续展示</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 错误的用法</span>    <span class="token comment" spellcheck="true">// 如果接口要求 Content-Type 是 application/json</span>    <span class="token comment" spellcheck="true">// 则传递普通 JavaScript 对象</span>    <span class="token comment" spellcheck="true">// updateUserPhoto({</span>    <span class="token comment" spellcheck="true">//   photo: blob</span>    <span class="token comment" spellcheck="true">// })</span>    <span class="token comment" spellcheck="true">// 如果接口要求 Content-Type 是 multipart/form-data</span>    <span class="token comment" spellcheck="true">// 则你必须传递 FormData 对象</span>    <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'photo'</span><span class="token punctuation">,</span> blob<span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">updateUserPhoto</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 关闭弹出层</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 更新视图</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'update-photo'</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>photo<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 提示成功</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$toast<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'更新成功'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$toast<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">'更新失败'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>在父组件中接收 <code>$emit</code> 触发的事件</p></li></ol><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 编辑头像 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>van<span class="token operator">-</span>popup v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"isUpdatePhotoShow"</span> position<span class="token operator">=</span><span class="token string">"bottom"</span> style<span class="token operator">=</span><span class="token string">"height: 100%;"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>update<span class="token operator">-</span>photo    v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"isUpdatePhotoShow"</span>    <span class="token punctuation">:</span>img<span class="token operator">=</span><span class="token string">"img"</span>    @close<span class="token operator">=</span><span class="token string">"isUpdatePhotoShow = false"</span>    @update<span class="token operator">-</span>photo<span class="token operator">=</span><span class="token string">"user.photo = $event"</span>  <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>van<span class="token operator">-</span>popup<span class="token operator">></span></code></pre><ol start="5"><li>刷新页面，查看上传头像功能是否实现</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>依赖注入</title>
      <link href="2021/12/22/yi-lai-zhu-ru/"/>
      <url>2021/12/22/yi-lai-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a><a href="https://cn.vuejs.org/v2/guide/components-edge-cases.html#%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5">依赖注入</a></h3><p>因为所有的组件都需要使用到 <code>articleId</code> 这个字段信息，如果都采用父子组件传值的方式，会很繁琐，这里我们使用一个新的语法，叫依赖注入</p><p>在父组件里  与data()平级</p><pre class=" language-vue"><code class="language-vue">// 依赖注入  provide: function() {    return {      articleId: this.articleId    }  },</code></pre><p>在任意子组件中 props 中</p><pre class=" language-vue"><code class="language-vue">inject: ['articleId']</code></pre><pre class=" language-vue"><code class="language-vue">// 另一种写法// 依赖 index 组件注入    inject: {      articleId: {        type: [Number, String, Object],        default: null      }    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> provide 和 inject </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人笔记</title>
      <link href="2021/12/22/ge-ren-bi-ji/"/>
      <url>2021/12/22/ge-ren-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="对象替换冒个字段名"><a href="#对象替换冒个字段名" class="headerlink" title="对象替换冒个字段名"></a>对象替换冒个字段名</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// arrayData为数组，oldName为json内现有的,newName为想要更改的名字</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>formList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/optValName/g</span><span class="token punctuation">,</span> <span class="token string">'warningName'</span><span class="token punctuation">)</span></code></pre><h2 id="封装的-api-及如何手写一个异步-Promise-数据"><a href="#封装的-api-及如何手写一个异步-Promise-数据" class="headerlink" title="封装的 api 及如何手写一个异步 Promise 数据"></a>封装的 api 及如何手写一个异步 Promise 数据</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 获取全部告警规则</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">select</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// return db.json</span>  <span class="token comment" spellcheck="true">// return new Promise(resolve => {</span>  <span class="token comment" spellcheck="true">// // 向后端请求路由数据</span>  <span class="token comment" spellcheck="true">// resolve({</span>  <span class="token comment" spellcheck="true">// select: 123</span>  <span class="token comment" spellcheck="true">// });</span>  <span class="token comment" spellcheck="true">// });</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">'/system/warningRule/select'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// query</span>    params<span class="token punctuation">:</span> query<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 皖熊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人笔记 -dome</title>
      <link href="2021/12/22/ge-ren-bi-ji-dome/"/>
      <url>2021/12/22/ge-ren-bi-ji-dome/</url>
      
        <content type="html"><![CDATA[<pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token keyword">var</span> formTitle <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>          signalCode<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          signalType<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          signalName<span class="token punctuation">:</span> <span class="token string">'其他故障'</span><span class="token punctuation">,</span>          signalUnit<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          warningIs<span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>          signalValue<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          signalValueRange<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          description<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          remark<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          status<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          deleted<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          createTime<span class="token punctuation">:</span> <span class="token string">'2020-12-07T13:30:42.000+0800'</span><span class="token punctuation">,</span>          updateTime<span class="token punctuation">:</span> <span class="token string">'2020-12-07T13:30:42.000+0800'</span><span class="token punctuation">,</span>          optionList<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          option<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>          signalCode<span class="token punctuation">:</span> <span class="token string">'01001101'</span><span class="token punctuation">,</span>          signalType<span class="token punctuation">:</span> <span class="token string">'fault'</span><span class="token punctuation">,</span>          signalName<span class="token punctuation">:</span> <span class="token string">'电池故障'</span><span class="token punctuation">,</span>          signalUnit<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          warningIs<span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>          signalValue<span class="token punctuation">:</span> <span class="token string">'battery'</span><span class="token punctuation">,</span>          signalValueRange<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          description<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          remark<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          status<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          deleted<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          createTime<span class="token punctuation">:</span> <span class="token string">'2020-12-04T14:02:54.000+0800'</span><span class="token punctuation">,</span>          updateTime<span class="token punctuation">:</span> <span class="token string">'2020-12-04T14:02:54.000+0800'</span><span class="token punctuation">,</span>          optionList<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          option<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>          signalCode<span class="token punctuation">:</span> <span class="token string">'01001102'</span><span class="token punctuation">,</span>          signalType<span class="token punctuation">:</span> <span class="token string">'fault'</span><span class="token punctuation">,</span>          signalName<span class="token punctuation">:</span> <span class="token string">'BMS硬件故障'</span><span class="token punctuation">,</span>          signalUnit<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          warningIs<span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>          signalValue<span class="token punctuation">:</span> <span class="token string">'bms'</span><span class="token punctuation">,</span>          signalValueRange<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          description<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          remark<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          status<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          deleted<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          createTime<span class="token punctuation">:</span> <span class="token string">'2020-12-07T13:19:28.000+0800'</span><span class="token punctuation">,</span>          updateTime<span class="token punctuation">:</span> <span class="token string">'2020-12-07T13:19:28.000+0800'</span><span class="token punctuation">,</span>          optionList<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          option<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span>          signalCode<span class="token punctuation">:</span> <span class="token string">'01001103'</span><span class="token punctuation">,</span>          signalType<span class="token punctuation">:</span> <span class="token string">'fault'</span><span class="token punctuation">,</span>          signalName<span class="token punctuation">:</span> <span class="token string">'PACK系统故障'</span><span class="token punctuation">,</span>          signalUnit<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          warningIs<span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>          signalValue<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          signalValueRange<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          description<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          remark<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          status<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          deleted<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          createTime<span class="token punctuation">:</span> <span class="token string">'2020-12-07T13:19:29.000+0800'</span><span class="token punctuation">,</span>          updateTime<span class="token punctuation">:</span> <span class="token string">'2020-12-07T13:19:29.000+0800'</span><span class="token punctuation">,</span>          optionList<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          option<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>          signalCode<span class="token punctuation">:</span> <span class="token string">'01002001'</span><span class="token punctuation">,</span>          signalType<span class="token punctuation">:</span> <span class="token string">'fault'</span><span class="token punctuation">,</span>          signalName<span class="token punctuation">:</span> <span class="token string">'BMS故障'</span><span class="token punctuation">,</span>          signalUnit<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          warningIs<span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>          signalValue<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          signalValueRange<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          description<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          remark<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          status<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          deleted<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          createTime<span class="token punctuation">:</span> <span class="token string">'2020-12-07T13:19:29.000+0800'</span><span class="token punctuation">,</span>          updateTime<span class="token punctuation">:</span> <span class="token string">'2020-12-07T13:19:29.000+0800'</span><span class="token punctuation">,</span>          optionList<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          option<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>          signalCode<span class="token punctuation">:</span> <span class="token string">'01003001'</span><span class="token punctuation">,</span>          signalType<span class="token punctuation">:</span> <span class="token string">'fault'</span><span class="token punctuation">,</span>          signalName<span class="token punctuation">:</span> <span class="token string">'BMS告警'</span><span class="token punctuation">,</span>          signalUnit<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          warningIs<span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>          signalValue<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          signalValueRange<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          description<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          remark<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          status<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          deleted<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          createTime<span class="token punctuation">:</span> <span class="token string">'2020-12-07T13:19:30.000+0800'</span><span class="token punctuation">,</span>          updateTime<span class="token punctuation">:</span> <span class="token string">'2020-12-07T13:19:30.000+0800'</span><span class="token punctuation">,</span>          optionList<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          option<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span>      <span class="token keyword">var</span> formList <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          userId<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          ruleId<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          signalCode<span class="token punctuation">:</span> <span class="token string">'01001001'</span><span class="token punctuation">,</span>          signalType<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          valIs<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          optVal<span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span>          signalLevel<span class="token punctuation">:</span> <span class="token string">'三级'</span><span class="token punctuation">,</span>          optValName<span class="token punctuation">:</span> <span class="token string">'2：GSM信号异常'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>          userId<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          ruleId<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          signalCode<span class="token punctuation">:</span> <span class="token string">'01001001'</span><span class="token punctuation">,</span>          signalType<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          valIs<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          optVal<span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span>          signalLevel<span class="token punctuation">:</span> <span class="token string">'三级'</span><span class="token punctuation">,</span>          optValName<span class="token punctuation">:</span> <span class="token string">'2：GSM信号异常'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>          userId<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          ruleId<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          signalCode<span class="token punctuation">:</span> <span class="token string">'01003001'</span><span class="token punctuation">,</span>          signalType<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          valIs<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          optVal<span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span>          signalLevel<span class="token punctuation">:</span> <span class="token string">'三级'</span><span class="token punctuation">,</span>          optValName<span class="token punctuation">:</span> <span class="token string">'正常'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          id<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>          userId<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          ruleId<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          signalCode<span class="token punctuation">:</span> <span class="token string">'056456001'</span><span class="token punctuation">,</span>          signalType<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>          valIs<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          optVal<span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span>          signalLevel<span class="token punctuation">:</span> <span class="token string">'级'</span><span class="token punctuation">,</span>          optValName<span class="token punctuation">:</span> <span class="token string">'正'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span>      <span class="token comment" spellcheck="true">// var a = []</span>      <span class="token comment" spellcheck="true">// arr1.forEach(item1 => {</span>      <span class="token comment" spellcheck="true">//   a = arr2.filter(item2 => {</span>      <span class="token comment" spellcheck="true">//     return item1.signalCode !== item2.signalCode</span>      <span class="token comment" spellcheck="true">//   })</span>      <span class="token comment" spellcheck="true">// })</span>      <span class="token comment" spellcheck="true">// console.log(a)</span>      <span class="token comment" spellcheck="true">// let signalCodes = this.formTitle.map(v => v.signalCode).filter(v => !!v);</span>      <span class="token comment" spellcheck="true">// return this.formList.filter(v => {</span>      <span class="token comment" spellcheck="true">//   return signalCodes.indexOf(v.signalCode) == -1;</span>      <span class="token comment" spellcheck="true">// });</span>      <span class="token comment" spellcheck="true">// let signalCodes = formTitle.map(v => v.signalCode)</span>      <span class="token comment" spellcheck="true">// console.log(signalCodes)</span>      <span class="token keyword">let</span> signalCodes <span class="token operator">=</span> formTitle<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">.</span>signalCode<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span><span class="token operator">!</span>v<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [null, "01001101", "01001102", "01001103", "01002001", "01003001"]</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>signalCodes<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["01001101", "01001102", "01001103", "01002001", "01003001"]</span>      <span class="token keyword">let</span> formList1 <span class="token operator">=</span> formList<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// return signalCodes.indexOf(v.signalCode) === -1;</span>        <span class="token keyword">return</span> <span class="token operator">!</span>signalCodes<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>signalCode<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formList1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[{…}, {…}, {…}]</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 皖熊 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yarn快速入门</title>
      <link href="2021/12/22/yarn-kuai-su-ru-men/"/>
      <url>2021/12/22/yarn-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="一-yarn-简介"><a href="#一-yarn-简介" class="headerlink" title="一.yarn 简介"></a>一.yarn 简介</h2><p>Facebook 贡献的 Javascript 包管理器。</p><p>yarn 的特点:</p><p>速度快:Yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快。</p><p>安全性高:在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。</p><p>可靠性高:使用详细、简洁的锁文件格式和明确的安装算法，Yarn 能够保证在不同系统上无差异的工作。</p><h2 id="二-安装"><a href="#二-安装" class="headerlink" title="二.安装"></a>二.安装</h2><p>1.可以直接从官网进行安装</p><pre><code>https://yarnpkg.com/en/docs/install</code></pre><p>2.可以直接使用 npm 安装</p><pre><code>npm install -g yarn</code></pre><h3 id="三-初始化-init"><a href="#三-初始化-init" class="headerlink" title="三.初始化 init"></a>三.初始化 init</h3><pre><code>yarn init -y   //默认使用文件信息,不要使用中文 生成package.json</code></pre><h3 id="四-添加依赖"><a href="#四-添加依赖" class="headerlink" title="四.添加依赖"></a>四.添加依赖</h3><pre><code>yarn add [package]yarn add [package]@[version]yarn add [package]@[tag]yarn global add[package] //全局安装将依赖项添加到不同依赖项类别中分别添加到 devDependencies、peerDependencies 和 optionalDependencies 类别中：yarn add [package] --devyarn add [package] --peeryarn add [package] --optional</code></pre><h3 id="五-更新依赖包"><a href="#五-更新依赖包" class="headerlink" title="五.更新依赖包"></a>五.更新依赖包</h3><pre><code>yarn upgrade [package]yarn upgrade [package]@[version]yarn upgrade [package]@[tag]</code></pre><h3 id="六-移除依赖包"><a href="#六-移除依赖包" class="headerlink" title="六.移除依赖包"></a>六.移除依赖包</h3><pre><code>yarn remove [package]</code></pre><h3 id="七-查看包的信息"><a href="#七-查看包的信息" class="headerlink" title="七.查看包的信息"></a>七.查看包的信息</h3><pre><code>yarn info [package]该命令将获取有关软件包的信息，并以树格式返回。该程序包不一定必须在本地安装。</code></pre><h3 id="八-发布包的-npm-资源库"><a href="#八-发布包的-npm-资源库" class="headerlink" title="八.发布包的 npm 资源库"></a>八.发布包的 npm 资源库</h3><pre><code>yarn publish</code></pre><h3 id="九-启动-create-react-app-脚手架的服务器"><a href="#九-启动-create-react-app-脚手架的服务器" class="headerlink" title="九.启动 create-react-app 脚手架的服务器"></a>九.启动 create-react-app 脚手架的服务器</h3><pre><code>yarn start</code></pre><h3 id="十-打包生成-create-react-app-的生产文件"><a href="#十-打包生成-create-react-app-的生产文件" class="headerlink" title="十.打包生成 create-react-app 的生产文件"></a>十.打包生成 create-react-app 的生产文件</h3><pre><code>yarn build</code></pre><h3 id="十一-缓存列表"><a href="#十一-缓存列表" class="headerlink" title="十一.缓存列表"></a>十一.缓存列表</h3><pre><code>yarn cache list</code></pre><h3 id="十二-缓存目录"><a href="#十二-缓存目录" class="headerlink" title="十二.缓存目录"></a>十二.缓存目录</h3><pre><code>yarn cache dir</code></pre><h3 id="十三-yarn-配置信息"><a href="#十三-yarn-配置信息" class="headerlink" title="十三.yarn 配置信息"></a>十三.yarn 配置信息</h3><pre><code>yarn config listyarn config set[key][value] //修改信息</code></pre>]]></content>
      
      
      <categories>
          
          <category> yarn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件之间通信</title>
      <link href="2021/12/22/vue-zu-jian-zhi-jian-tong-xin/"/>
      <url>2021/12/22/vue-zu-jian-zhi-jian-tong-xin/</url>
      
        <content type="html"><![CDATA[<h3 id="vue-组件之间通信的-8-种方式"><a href="#vue-组件之间通信的-8-种方式" class="headerlink" title="vue 组件之间通信的 8 种方式"></a>vue 组件之间通信的 8 种方式</h3><p>对于 vue 来说，组件之间的消息传递是非常重要的，下面是我对组件之间消息传递的常用方式的总结。</p><ul><li>props 和$emit(常用)</li><li>$attrs和$listeners</li><li>中央事件总线（非父子组件间通信）</li><li>v-model</li><li>provide 和 inject</li><li>$parent和$children</li><li>vuex</li></ul><h4 id="1-props-和-emit"><a href="#1-props-和-emit" class="headerlink" title="1.props 和$emit"></a>1.props 和$emit</h4><p>父组件向子组件传递数据是通过 prop 传递的，子组件传递数据给父组件是通过$emit 触发事件来做到的.</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      mymessage<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`      &lt;div>        &lt;input type="text" v-model="mymessage" @input="passData(mymessage)">&lt;/div>    `</span></span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//设置props属性值，得到父组件传递过来的数据</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">passData</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//触发父组件中的事件，向父组件传值</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'getChildData'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'parent'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`      &lt;div>        &lt;p>this is parent compoent!&lt;/p>        &lt;child :message="message" v-on:getChildData="getChildData">&lt;/child>      &lt;/div>    `</span></span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//执行子组件触发的事件</span>    <span class="token function">getChildData</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>在上面的例子中，有父组件 parent 和子组件 child。</p><p>1).父组件传递了 message 数据给子组件，并且通过 v-on 绑定了一个 getChildData 事件来监听子组件的触发事件；</p><p>2).子组件通过 props 得到相关的 message 数据,最后通过 this.$emit 触发了 getChildData 事件</p><h4 id="2-attrs和-listeners"><a href="#2-attrs和-listeners" class="headerlink" title="2.$attrs和$listeners"></a>2.$attrs和$listeners</h4><p>第一种方式处理父子组件之间的数据传输有一个问题：如果父组件 A 下面有子组件 B，组件 B 下面有组件 C,这时如果组件 A 想传递数据给组件 C 怎么办呢？ 如果采用第一种方法，我们必须让组件 A 通过 prop 传递消息给组件 B，组件 B 在通过 prop 传递消息给组件 C；要是组件 A 和组件 C 之间有更多的组件，那采用这种方式就很复杂了。Vue 2.4 开始提供了$attrs和$listeners 来解决这个问题，能够让组件 A 之间传递消息给组件 C</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`      &lt;div>        &lt;input type="text" v-model="$attrs.messagec" @input="passCData($attrs.messagec)"> &lt;/div>    `</span></span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">passCData</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//触发父组件A中的事件</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'getCData'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      mymessage<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`      &lt;div>        &lt;input type="text" v-model="mymessage" @input="passData(mymessage)">        &lt;!-- C组件中能直接触发getCData的原因在于 B组件调用C组件时 使用 v-on 绑定了$listeners 属性 -->        &lt;!-- 通过v-bind 绑定$attrs属性，C组件可以直接获取到A组件中传递下来的props（除了B组件中props声明的） -->        &lt;C v-bind="$attrs" v-on="$listeners">&lt;/C>      &lt;/div>    `</span></span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//得到父组件传递过来的数据</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">passData</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//触发父组件中的事件</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'getChildData'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`      &lt;div>        &lt;p>this is parent compoent!&lt;/p>        &lt;B :messagec="messagec" :message="message" v-on:getCData="getCData" v-on:getChildData="getChildData(message)">&lt;/B>      &lt;/div>    `</span></span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>      messagec<span class="token punctuation">:</span> <span class="token string">'hello c'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//传递给c组件的数据</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">getChildData</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是来自B组件的数据'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//执行C子组件触发的事件</span>    <span class="token function">getCData</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是来自C组件的数据：'</span> <span class="token operator">+</span> val<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="3-中央事件总线"><a href="#3-中央事件总线" class="headerlink" title="3.中央事件总线"></a>3.中央事件总线</h4><p>上面两种方式处理的都是父子组件之间的数据传递，而如果两个组件不是父子关系呢？这种情况下可以使用中央事件总线的方式。新建一个 Vue 事件 bus 对象，然后通过 bus.$emit触发事件，bus.$on 监听触发的事件。</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'brother1'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      mymessage<span class="token punctuation">:</span> <span class="token string">'hello brother1'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`      &lt;div>        &lt;p>this is brother1 compoent!&lt;/p>        &lt;input type="text" v-model="mymessage" @input="passData(mymessage)">      &lt;/div>    `</span></span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">passData</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//触发全局事件globalEvent</span>      bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'globalEvent'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'brother2'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`      &lt;div>        &lt;p>this is brother2 compoent!&lt;/p>        &lt;p>brother1传递过来的数据：{{brothermessage}}&lt;/p>      &lt;/div>    `</span></span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      mymessage<span class="token punctuation">:</span> <span class="token string">'hello brother2'</span><span class="token punctuation">,</span>      brothermessage<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//绑定全局事件globalEvent</span>    bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'globalEvent'</span><span class="token punctuation">,</span> val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>brothermessage <span class="token operator">=</span> val    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//中央事件总线</span><span class="token keyword">var</span> bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`      &lt;div>        &lt;brother1>&lt;/brother1>        &lt;brother2>&lt;/brother2>      &lt;/div>    `</span></span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="4-provide-和-inject"><a href="#4-provide-和-inject" class="headerlink" title="4.provide 和 inject"></a>4.provide 和 inject</h4><p>在 Vue.js 的 <code>2.2.0+</code> 版本中添加加了 provide 和 inject 选项。他们成对出现，用于父级组件向下传递数据。</p><p>父组件中通过 provider 来提供变量，然后在子组件中通过 inject 来注入变量。不论子组件有多深，只要调用了 inject 那么就可以注入 provider 中的数据。而不是局限于只能从当前父组件的 prop 属性来获取数据，只要在父组件的生命周期内，子组件都可以调用。</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    inject<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'for'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//得到父组件传递过来的数据</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        mymessage<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">for</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`      &lt;div>        &lt;input type="tet" v-model="mymessage">      &lt;/div>  })  Vue.component('parent',{    template:`</span></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token keyword">this</span> is parent compoent<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>child<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    `<span class="token punctuation">,</span>    provide<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">:</span><span class="token string">'test'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span><span class="token string">'hello'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="5-v-model"><a href="#5-v-model" class="headerlink" title="5.v-model"></a>5.v-model</h4><p>父组件通过 v-model 传递值给子组件时，会自动传递一个 value 的 prop 属性，在子组件中通过 this.$emit(‘input’,val)自动修改 v-model 绑定的值</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    props<span class="token punctuation">:</span><span class="token punctuation">{</span>      value<span class="token punctuation">:</span>String<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//v-model会自动传递一个字段为value的prop属性</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        mymessage<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>value      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">changeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>mymessage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过如此调用可以改变父组件上v-model绑定的值</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`      &lt;div>        &lt;input type="text" v-model="mymessage" @change="changeValue">      &lt;/div>  })  Vue.component('parent',{    template:`</span></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token keyword">this</span> is parent compoent<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>child v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token template-string"><span class="token string">`,    data(){      return {        message:'hello'      }    }  })  var app=new Vue({    el:'#app',    template:`</span></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>parent<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    `  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="6-parent和-children"><a href="#6-parent和-children" class="headerlink" title="6. $parent和$children"></a>6. $parent和$children</h4><p>​ 在组件内部可以直接通过子组件$parent对父组件进行操作，父组件通过$children 对子组件进行操作.</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    props<span class="token punctuation">:</span><span class="token punctuation">{</span>      value<span class="token punctuation">:</span>String<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//v-model会自动传递一个字段为value的prop属性</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        mymessage<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>value      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      <span class="token function">changeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mymessage<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过如此调用可以改变父组件的值</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`      &lt;div>        &lt;input type="text" v-model="mymessage" @change="changeValue">      &lt;/div>  })  Vue.component('parent',{    template:`</span></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token keyword">this</span> is parent compoent<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeChildValue"</span><span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>button <span class="token operator">></span>        <span class="token operator">&lt;</span>child<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>child<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token template-string"><span class="token string">`,    methods:{      changeChildValue(){        this.$children[0].mymessage = 'hello';      }    },    data(){      return {        message:'hello'      }    }  })  var app=new Vue({    el:'#app',    template:`</span></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>parent<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>parent<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    `  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="7-vuex-处理组件之间的数据交互"><a href="#7-vuex-处理组件之间的数据交互" class="headerlink" title="7. vuex 处理组件之间的数据交互"></a>7. vuex 处理组件之间的数据交互</h4><p>如果业务逻辑复杂，很多组件之间需要同时处理一些公共的数据，这个时候才有上面这一些方法可能不利于项目的维护，vuex 的做法就是将这一些公共的数据抽离出来，然后其他组件就可以对这个公共数据进行读写操作，这样达到了解耦的目的。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue组件之间通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp</title>
      <link href="2021/12/22/uniapp-shop/"/>
      <url>2021/12/22/uniapp-shop/</url>
      
        <content type="html"><![CDATA[<h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><ol><li><p>访问 HBuilderX 的官网首页 <a href="https://www.dcloud.io/hbuilderx.html">https://www.dcloud.io/hbuilderx.html</a></p></li><li><p>点击首页的 DOWNLOAD 按钮</p></li><li><p>选择下载 正式版 -&gt; App 开发版</p></li></ol><p>为了方便编写样式（例如：<style lang="scss"></style>），建议安装 scss/sass 编译 插件。插件下载地址：<br><a href="https://ext.dcloud.net.cn/plugin?name=compile-node-sass">https://ext.dcloud.net.cn/plugin?name=compile-node-sass</a></p><ol start="4"><li><p>目录结构<br>┌─components uni-app 组件目录<br>│ └─comp-a.vue 可复用的 a 组件<br>├─pages 业务页面文件存放的目录<br>│ ├─index<br>│ │ └─index.vue index 页面<br>│ └─list<br>│ └─list.vue list 页面<br>├─static 存放应用引用静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此<br>├─main.js Vue 初始化入口文件<br>├─App.vue 应用配置，用来配置小程序的全局样式、生命周期函数等<br>├─manifest.json 配置应用名称、appid、logo、版本等打包信息<br>└─pages.json 配置页面路径、页面窗口样式、tabBar、navigationBar 等页面类信息</p></li><li><p>把项目运行到微信开发者工具</p><ul><li><p>填写自己的微信小程序的 AppID：</p></li><li><p>在 HBuilderX 中，配置“微信开发者工具”的安装路径：</p></li><li><p>在微信开发者工具中，通过 设置 -&gt; 安全设置 面板，开启“微信开发者工具”的服务端口：</p></li><li><p>在 HBuilderX 中，点击菜单栏中的 运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，将当前 uni-app 项目编译之后，自动运行到微信开发者工具中，从而方便查看项目效果与调试：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 微信索引报黄色警告</span><span class="token string">"mp-weixin"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"appid"</span> <span class="token punctuation">:</span> <span class="token string">"wx880e43c02bf7bd55"</span><span class="token punctuation">,</span>        <span class="token string">"setting"</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"urlCheck"</span> <span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token string">"checkSiteMap"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ul></li></ol><h1 id="使用-Git-管理项目"><a href="#使用-Git-管理项目" class="headerlink" title="使用 Git 管理项目"></a>使用 Git 管理项目</h1><p>本地管理</p><ol><li> 在项目根目录中新建 .gitignore 忽略文件，并配置如下：</li></ol><pre class=" language-js"><code class="language-js"># 忽略 node_modules 目录<span class="token operator">/</span>node_modules<span class="token operator">/</span>unpackage<span class="token operator">/</span>dist</code></pre>   <!--注意：由于我们忽略了 unpackage 目录中仅有的 dist 目录，因此默认情况下， unpackage 目录不会被 Git 追踪-->   <!--此时，为了让 Git 能够正常追踪 unpackage 目录，按照惯例，我们可以在 unpackage 目录下创建一个叫做 .gitkeep 的文件进行占位--><ol start="2"><li> 打开终端，切换到项目根目录中，运行如下的命令</li></ol><pre class=" language-js"><code class="language-js">git initgit add <span class="token punctuation">.</span>git commit <span class="token operator">-</span>m <span class="token string">"init project"</span>把项目托管到码云</code></pre><p>#　创建 tabBar 页面</p><p>在 pages 目录上鼠标右键，选择新建页面<br>在弹出的窗口中，填写页面的名称、勾选 scss 模板之后,勾选 pages.json 中注册和创建同名目录,点击创建按钮。</p><h1 id="配置-tabBar-效果"><a href="#配置-tabBar-效果" class="headerlink" title="配置 tabBar 效果"></a>配置 tabBar 效果</h1><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"tabBar"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"selectedColor"</span><span class="token punctuation">:</span> <span class="token string">"#C00000"</span><span class="token punctuation">,</span>    <span class="token string">"list"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token string">"pagePath"</span><span class="token punctuation">:</span> <span class="token string">"pages/home/home"</span><span class="token punctuation">,</span>        <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token string">"首页"</span><span class="token punctuation">,</span>        <span class="token string">"iconPath"</span><span class="token punctuation">:</span> <span class="token string">"static/tab_icons/home.png"</span><span class="token punctuation">,</span>        <span class="token string">"selectedIconPath"</span><span class="token punctuation">:</span> <span class="token string">"static/tab_icons/home-active.png"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="https://www.escook.cn/docs-uni-shop/">https://www.escook.cn/docs-uni-shop/</a></p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uni-shop</title>
      <link href="2021/12/22/uni-shop/"/>
      <url>2021/12/22/uni-shop/</url>
      
        <content type="html"><![CDATA[<h2 id="Headline"><a href="#Headline" class="headerlink" title="Headline"></a>Headline</h2><p>TIP<br>基于 uniapp 开发的微信小程序商城项目</p><h3 id="tabBar-相关的页面"><a href="#tabBar-相关的页面" class="headerlink" title="tabBar 相关的页面"></a>tabBar 相关的页面</h3><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p><img src="https://a-xionglijun.github.io/medias/image/0-1.f74c4d08.png"></p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p><img src="https://a-xionglijun.github.io/medias/image/0-2.b5fef657.png"></p><h3 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h3><p><img src="https://a-xionglijun.github.io/medias/image/0-3.9feb6833.png"></p><p><img src="https://a-xionglijun.github.io/medias/image/0-4.2f3b901d.png"></p><p><img src="https://a-xionglijun.github.io/medias/image/0-5.b98d4cbd.png"></p><h3 id="我的"><a href="#我的" class="headerlink" title="我的"></a>我的</h3><p><img src="https://a-xionglijun.github.io/medias/image/%E4%B8%8B%E8%BD%BD.png"></p><p><img src="https://a-xionglijun.github.io/medias/image/0-7.73a762ca.png"></p><p><img src="https://a-xionglijun.github.io/medias/image/0-8.5fa0379f.png"></p><h5 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h5><p>![](<a href="https://a-xionglijun.github.io/medias/image/%E4%B8%8B%E8%BD%BD">https://a-xionglijun.github.io/medias/image/下载</a> (1).png)</p><p><img src="https://a-xionglijun.github.io/medias/image/0-10.a47a93b5.png"></p><h5 id="商品列表"><a href="#商品列表" class="headerlink" title="商品列表"></a>商品列表</h5><p><img src="https://a-xionglijun.github.io/medias/image/0-14.7e51b66a.png"></p><h5 id="商品详情"><a href="#商品详情" class="headerlink" title="商品详情"></a>商品详情</h5><p><img src="https://a-xionglijun.github.io/medias/image/0-11.7d8b4a84.png"></p><p><img src="https://a-xionglijun.github.io/medias/image/0-12.b0e03cee.png"></p><p><img src="https://a-xionglijun.github.io/medias/image/0-13.79de3e1d.png"></p><h5 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h5><p><img src="https://a-xionglijun.github.io/medias/image/0-15.c23c7a61.png"></p><h2 id="1-起步"><a href="#1-起步" class="headerlink" title="1.起步"></a>1.起步</h2><h3 id="1-1-uni-app-简介"><a href="#1-1-uni-app-简介" class="headerlink" title="1.1 uni-app 简介"></a>1.1 uni-app 简介</h3><p>uni-app 是一个使用 Vue.js 开发所有前端应用的框架。开发者编写一套代码，可发布到 iOS、Android、H5、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉/淘宝）、快应用等多个平台。</p><p><img src="https://a-xionglijun.github.io/medias/image/1/1-7.43264ae4.png"></p><blockquote><p>详细的 uni-app 官方文档，请翻阅 <a href="https://uniapp.dcloud.net.cn/">https://uniapp.dcloud.net.cn/</a></p></blockquote><h3 id="1-2-开发工具"><a href="#1-2-开发工具" class="headerlink" title="1.2 开发工具"></a>1.2 开发工具</h3><p>uni-app 官方推荐使用 <strong>HBuilderX</strong> 来开发 uni-app 类型的项目。主要好处：</p><ul><li>模板丰富</li><li>完善的智能提示</li><li>一键运行</li></ul><blockquote><p>当然，你依然可以根据自己的喜好，选择使用 VS Code、Sublime、<del>记事本</del>… 等自己喜欢的编辑器！</p></blockquote><h4 id="1-2-1-下载-HBuilderX"><a href="#1-2-1-下载-HBuilderX" class="headerlink" title="1.2.1 下载 HBuilderX"></a>1.2.1 下载 HBuilderX</h4><ol><li>访问 HBuilderX 的官网首页 <a href="https://www.dcloud.io/hbuilderx.html">https://www.dcloud.io/hbuilderx.html</a></li><li>点击首页的 <code>DOWNLOAD</code> 按钮</li><li>选择下载 <code>正式版</code> -&gt; <code>App 开发版</code></li></ol><h4 id="1-2-2-安装-HBuilderX"><a href="#1-2-2-安装-HBuilderX" class="headerlink" title="1.2.2 安装 HBuilderX"></a>1.2.2 安装 HBuilderX</h4><ol><li>将下载的 <code>zip包</code> 进行解压缩</li><li>将解压之后的文件夹，存放到<strong>纯英文</strong>的目录中（且不能包含括号等特殊字符）</li><li>双击 <code>HBuilderX.exe</code> 即可启动 HBuilderX</li></ol><h4 id="1-2-3-安装-scss-sass-编译"><a href="#1-2-3-安装-scss-sass-编译" class="headerlink" title="1.2.3 安装 scss/sass 编译"></a>1.2.3 安装 scss/sass 编译</h4><p>为了方便编写样式（例如：<code>&lt;style lang="scss"&gt;&lt;/style&gt;</code>），建议安装 <code>scss/sass 编译</code> 插件。插件下载地址：</p><blockquote><p><a href="https://ext.dcloud.net.cn/plugin?name=compile-node-sass">https://ext.dcloud.net.cn/plugin?name=compile-node-sass</a></p></blockquote><p>进入插件下载页面之后，点击右上角的 <code>使用 HBuilderX 导入插件</code> 按钮进行自动安装，截图如下：</p><p><img src="https://a-xionglijun.github.io/medias/image/1/1-1.74fed64c.png"></p><h4 id="1-2-4-快捷键方案切换"><a href="#1-2-4-快捷键方案切换" class="headerlink" title="1.2.4 快捷键方案切换"></a>1.2.4 快捷键方案切换</h4><p>操作步骤：工具 -&gt; 预设快捷键方案切换 -&gt; VS Code</p><p><img src="https://a-xionglijun.github.io/medias/image/1/1-2.1c0c98c6.png"></p><h4 id="1-2-5-修改编辑器的基本设置"><a href="#1-2-5-修改编辑器的基本设置" class="headerlink" title="1.2.5 修改编辑器的基本设置"></a>1.2.5 修改编辑器的基本设置</h4><p>操作步骤：工具 -&gt; 设置 -&gt; 打开 Settings.json 按需进行配置</p><p><img src="https://a-xionglijun.github.io/medias/image/1/1-3.b48ee161.png"></p><p><strong>源码视图</strong>下可用的参考配置：</p><pre><code>{  "editor.colorScheme": "Default",  "editor.fontSize": 12,  "editor.fontFamily": "Consolas",  "editor.fontFmyCHS": "微软雅黑 Light",  "editor.insertSpaces": true,  "editor.lineHeight": "1.5",  "editor.minimap.enabled": false,  "editor.mouseWheelZoom": true,  "editor.onlyHighlightWord": false,  "editor.tabSize": 2,  "editor.wordWrap": true,  "explorer.iconTheme": "vs-seti",  "editor.codeassist.px2rem.enabel": false,  "editor.codeassist.px2upx.enabel": false}</code></pre><blockquote><p>Tips：可以使用 <strong>Ctrl + 鼠标滚轮</strong> 缩放编辑器</p></blockquote><h3 id="1-3-新建-uni-app-项目"><a href="#1-3-新建-uni-app-项目" class="headerlink" title="1.3 新建 uni-app 项目"></a>1.3 新建 uni-app 项目</h3><ol><li><p>文件 -&gt; 新建 -&gt; 项目</p><p><img src="https://a-xionglijun.github.io/medias/image/1/1-4.b7efec14.png"></p></li><li><p>填写项目基本信息</p><p><img src="https://a-xionglijun.github.io/medias/image/1/1-5.585d746d.png"></p></li><li><p>项目创建成功</p><p><img src="https://a-xionglijun.github.io/medias/image/1/1-6.01c783f2.png"></p></li></ol><h3 id="1-4-目录结构"><a href="#1-4-目录结构" class="headerlink" title="1.4 目录结构"></a>1.4 目录结构</h3><p>一个 uni-app 项目，默认包含如下目录及文件：</p><pre><code>┌─components            uni-app组件目录│  └─comp-a.vue         可复用的a组件├─pages                 业务页面文件存放的目录│  ├─index│  │  └─index.vue       index页面│  └─list│     └─list.vue        list页面├─static                存放应用引用静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此├─main.js               Vue初始化入口文件├─App.vue               应用配置，用来配置小程序的全局样式、生命周期函数等├─manifest.json         配置应用名称、appid、logo、版本等打包信息└─pages.json            配置页面路径、页面窗口样式、tabBar、navigationBar 等页面类信息</code></pre><h3 id="1-5-把项目运行到微信开发者工具"><a href="#1-5-把项目运行到微信开发者工具" class="headerlink" title="1.5 把项目运行到微信开发者工具"></a>1.5 把项目运行到微信开发者工具</h3><ol><li><p>填写自己的微信小程序的 AppID：</p><p><img src="https://a-xionglijun.github.io/medias/image/1/1-8.4c14eb68.png"></p></li><li><p>在 HBuilderX 中，配置“微信开发者工具”的<strong>安装路径</strong>：</p><p><img src="https://a-xionglijun.github.io/medias/image/1/1-9.deca7c09.png"></p></li><li><p>在微信开发者工具中，通过 &nbsp;<code>设置 -&gt; 安全设置</code>&nbsp; 面板，开启“微信开发者工具”的<strong>服务端口</strong>：</p><p><img src="https://a-xionglijun.github.io/medias/image/1/1-10.png"></p></li><li><p>在 HBuilderX 中，点击菜单栏中的 &nbsp;<code>运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具</code>，将当前 uni-app 项目编译之后，自动运行到微信开发者工具中，从而方便查看项目效果与调试：</p><p><img src="https://a-xionglijun.github.io/medias/image/1/1-11.2637002b.png"></p></li><li><p>初次运行成功之后的项目效果：</p><p><img src="https://a-xionglijun.github.io/medias/image/1/1-12.1b33864e.png"></p></li></ol><h3 id="1-6-使用-Git-管理项目"><a href="#1-6-使用-Git-管理项目" class="headerlink" title="1.6 使用 Git 管理项目"></a>1.6 使用 Git 管理项目</h3><h4 id="1-6-1-本地管理"><a href="#1-6-1-本地管理" class="headerlink" title="1.6.1 本地管理"></a>1.6.1 本地管理</h4><ol><li>在项目根目录中新建 <code>.gitignore</code> 忽略文件，并配置如下：</li></ol><pre><code># 忽略 node_modules 目录/node_modules/unpackage/dist</code></pre><blockquote><p>注意：由于我们忽略了 unpackage 目录中<strong>仅有的</strong> dist 目录，因此默认情况下， unpackage 目录不会被 Git 追踪</p></blockquote><blockquote><p>此时，为了让 Git 能够正常追踪 unpackage 目录，按照惯例，我们可以在 unpackage 目录下创建一个叫做 <code>.gitkeep</code> 的文件进行占位</p></blockquote><ol><li>打开终端，切换到项目根目录中，运行如下的命令，初始化本地 Git 仓库：</li></ol><pre><code>git init</code></pre><ol><li>将所有文件都加入到暂存区：</li></ol><pre><code>git add .</code></pre><ol><li>本地提交更新：</li></ol><pre><code>git commit -m "init project"</code></pre><h4 id="1-6-2-把项目托管到码云"><a href="#1-6-2-把项目托管到码云" class="headerlink" title="1.6.2 把项目托管到码云"></a>1.6.2 把项目托管到码云</h4><ol><li>注册并激活码云账号（ 注册页面地址：<a href="https://gitee.com/signup">https://gitee.com/signup</a> ）</li><li>生成并配置 SSH 公钥</li><li>创建空白的码云仓库</li><li>把本地项目上传到码云对应的空白仓库中</li></ol><h2 id="2-tabBar"><a href="#2-tabBar" class="headerlink" title="2.tabBar"></a>2.tabBar</h2><h3 id="2-0-创建-tabBar-分支"><a href="#2-0-创建-tabBar-分支" class="headerlink" title="2.0 创建 tabBar 分支"></a>2.0 创建 tabBar 分支</h3><p>运行如下的命令，基于 master 分支在本地创建 tabBar 子分支，用来开发和 tabBar 相关的功能：</p><pre><code>git checkout -b tabbar</code></pre><h3 id="2-1-创建-tabBar-页面"><a href="#2-1-创建-tabBar-页面" class="headerlink" title="2.1 创建 tabBar 页面"></a>2.1 创建 tabBar 页面</h3><p>在 <code>pages</code> 目录中，创建首页(home)、分类(cate)、购物车(cart)、我的(my) 这 4 个 tabBar 页面。在 HBuilderX 中，可以通过如下的两个步骤，快速新建页面：</p><ol><li><p>在 <code>pages</code> 目录上鼠标右键，选择<strong>新建页面</strong></p></li><li><p>在弹出的窗口中，填写<strong>页面的名称</strong>、<strong>勾选 scss 模板</strong>之后，点击创建按钮。截图如下：</p><p><img src="https://a-xionglijun.github.io/medias/image/2/2-1.a57d1b5c.png"></p></li></ol><h3 id="2-2-配置-tabBar-效果"><a href="#2-2-配置-tabBar-效果" class="headerlink" title="2.2 配置 tabBar 效果"></a>2.2 配置 tabBar 效果</h3><ol><li><p>将 <code>资料</code> 目录下的 <code>static 文件夹</code> 拷贝一份，替换掉项目根目录中的 <code>static 文件夹</code></p></li><li><p>修改项目根目录中的 <code>pages.json</code> 配置文件，新增 <code>tabBar</code> 的配置节点如下：</p><pre><code>{  "tabBar": {    "selectedColor": "#C00000",    "list": [      {        "pagePath": "pages/home/home",        "text": "首页",        "iconPath": "static/tab_icons/home.png",        "selectedIconPath": "static/tab_icons/home-active.png"      },      {        "pagePath": "pages/cate/cate",        "text": "分类",        "iconPath": "static/tab_icons/cate.png",        "selectedIconPath": "static/tab_icons/cate-active.png"      },      {        "pagePath": "pages/cart/cart",        "text": "购物车",        "iconPath": "static/tab_icons/cart.png",        "selectedIconPath": "static/tab_icons/cart-active.png"      },      {        "pagePath": "pages/my/my",        "text": "我的",        "iconPath": "static/tab_icons/my.png",        "selectedIconPath": "static/tab_icons/my-active.png"      }    ]  }}</code></pre></li></ol><h3 id="2-3-删除默认的-index-首页"><a href="#2-3-删除默认的-index-首页" class="headerlink" title="2.3 删除默认的 index 首页"></a>2.3 删除默认的 index 首页</h3><ol><li>在 HBuilderX 中，把 <code>pages</code> 目录下的 <code>index首页文件夹</code> 删除掉</li><li>同时，把 <code>page.json</code> 中记录的 <code>index 首页</code> 路径删除掉</li><li>为了防止小程序运行失败，在微信开发者工具中，手动删除 <code>pages</code> 目录下的 <code>index 首页文件夹</code></li><li>同时，把 <code>components</code> 目录下的 <code>uni-link 组件文件夹</code> 删除掉</li></ol><h3 id="2-4-修改导航条的样式效果"><a href="#2-4-修改导航条的样式效果" class="headerlink" title="2.4 修改导航条的样式效果"></a>2.4 修改导航条的样式效果</h3><ol><li><p>打开 <code>pages.json</code> 这个全局的配置文件</p></li><li><p>修改 <code>globalStyle</code> 节点如下：</p><pre><code>{  "globalStyle": {    "navigationBarTextStyle": "white",    "navigationBarTitleText": "黑马优购",    "navigationBarBackgroundColor": "#C00000",    "backgroundColor": "#FFFFFF"  }}</code></pre></li></ol><h3 id="2-5-分支的提交与合并"><a href="#2-5-分支的提交与合并" class="headerlink" title="2.5 分支的提交与合并"></a>2.5 分支的提交与合并</h3><ol><li>将本地的 tabbar 分支进行本地的 commit 提交：</li></ol><pre><code>git add .git commit -m "完成了 tabBar 的开发"</code></pre><ol><li>将本地的 tabbar 分支推送到远程仓库进行保存：</li></ol><pre><code>git push -u origin tabbar</code></pre><ol><li>将本地的 tabbar 分支合并到本地的 master 分支：</li></ol><pre><code>git checkout mastergit merge tabbar</code></pre><ol><li>删除本地的 tabbar 分支：</li></ol><pre><code>git branch -d tabbar</code></pre><h2 id="3-首页"><a href="#3-首页" class="headerlink" title="3.首页"></a>3.首页</h2><h3 id="3-0-创建-home-分支"><a href="#3-0-创建-home-分支" class="headerlink" title="3.0 创建 home 分支"></a>3.0 创建 home 分支</h3><p>运行如下的命令，基于 master 分支在本地创建 home 子分支，用来开发和 home 首页相关的功能：</p><pre><code>git checkout -b home</code></pre><h3 id="3-1-配置网络请求"><a href="#3-1-配置网络请求" class="headerlink" title="3.1 配置网络请求"></a>3.1 配置网络请求</h3><p>由于平台的限制，小程序项目中<strong>不支持 axios</strong>，而且原生的 <code>wx.request()</code> API 功能较为简单，<strong>不支持拦截器</strong>等全局定制的功能。因此，建议在 uni-app 项目中使用 <code>@escook/request-miniprogram</code> 第三方包发起网络数据请求。</p><blockquote><p>请参考 <strong>@escook/request-miniprogram</strong> 的官方文档进行安装、配置、使用</p></blockquote><blockquote><p>官方文档：<a href="https://www.npmjs.com/package/@escook/request-miniprogram">https://www.npmjs.com/package/@escook/request-miniprogram</a></p></blockquote><p>最终，在项目的 <code>main.js</code> 入口文件中，通过如下的方式进行配置：</p><pre><code>import { $http } from '@escook/request-miniprogram'uni.$http = $http// 配置请求根路径$http.baseUrl = 'https://www.uinav.com'// 请求开始之前做一些事情$http.beforeRequest = function (options) {  uni.showLoading({    title: '数据加载中...',  })}// 请求完成之后做一些事情$http.afterRequest = function () {  uni.hideLoading()}</code></pre><h3 id="3-2-轮播图区域"><a href="#3-2-轮播图区域" class="headerlink" title="3.2 轮播图区域"></a>3.2 轮播图区域</h3><h4 id="3-2-1-请求轮播图的数据"><a href="#3-2-1-请求轮播图的数据" class="headerlink" title="3.2.1 请求轮播图的数据"></a>3.2.1 请求轮播图的数据</h4><p>实现步骤：</p><ol><li>在 data 中定义轮播图的数组</li><li>在 onLoad 生命周期函数中调用获取轮播图数据的方法</li><li>在 methods 中定义获取轮播图数据的方法</li></ol><p>示例代码：</p><pre><code>export default {  data() {    return {      // 1. 轮播图的数据列表，默认为空数组      swiperList: [],    }  },  onLoad() {    // 2. 在小程序页面刚加载的时候，调用获取轮播图数据的方法    this.getSwiperList()  },  methods: {    // 3. 获取轮播图数据的方法    async getSwiperList() {      // 3.1 发起请求      const { data: res } = await uni.$http.get('/api/public/v1/home/swiperdata')      // 3.2 请求失败      if (res.meta.status !== 200) {        return uni.showToast({          title: '数据请求失败！',          duration: 1500,          icon: 'none',        })      }      // 3.3 请求成功，为 data 中的数据赋值      this.swiperList = res.message    },  },}</code></pre><h4 id="3-2-2-渲染轮播图的-UI-结构"><a href="#3-2-2-渲染轮播图的-UI-结构" class="headerlink" title="3.2.2 渲染轮播图的 UI 结构"></a>3.2.2 渲染轮播图的 UI 结构</h4><ol><li><p>渲染 UI 结构：</p><pre><code>&lt;template&gt;  &lt;view&gt;    &lt;!-- 轮播图区域 --&gt;    &lt;swiper :indicator-dots="true" :autoplay="true" :interval="3000" :duration="1000" :circular="true"&gt;      &lt;!-- 循环渲染轮播图的 item 项 --&gt;      &lt;swiper-item v-for="(item, i) in swiperList" :key="i"&gt;        &lt;view class="swiper-item"&gt;          &lt;!-- 动态绑定图片的 src 属性 --&gt;          &lt;image :src="item.image_src"&gt;&lt;/image&gt;        &lt;/view&gt;      &lt;/swiper-item&gt;    &lt;/swiper&gt;  &lt;/view&gt;&lt;/template&gt;</code></pre></li><li><p>美化 UI 结构：</p><pre><code>&lt;style lang="scss"&gt;swiper { height: 330rpx; .swiper-item, image {   width: 100%;   height: 100%; }}&lt;/style&gt;</code></pre></li></ol><h4 id="3-2-3-配置小程序分包"><a href="#3-2-3-配置小程序分包" class="headerlink" title="3.2.3 配置小程序分包"></a>3.2.3 配置小程序分包</h4><blockquote><p>分包可以减少小程序首次启动时的加载时间</p></blockquote><p>为此，我们在项目中，把 tabBar 相关的 4 个页面放到主包中，其它页面（例如：商品详情页、商品列表页）放到分包中。在 uni-app 项目中，配置分包的步骤如下：</p><ol><li><p>在项目根目录中，创建分包的根目录，命名为 <code>subpkg</code></p></li><li><p>在 <code>pages.json</code> 中，和 <code>pages</code> 节点平级的位置声明 <code>subPackages</code> 节点，用来定义分包相关的结构：</p><pre><code>{  "pages": [    {      "path": "pages/home/home",      "style": {}    },    {      "path": "pages/cate/cate",      "style": {}    },    {      "path": "pages/cart/cart",      "style": {}    },    {      "path": "pages/my/my",      "style": {}    }  ],  "subPackages": [    {      "root": "subpkg",      "pages": []    }  ]}</code></pre></li><li><p>在 <code>subpkg</code> 目录上鼠标右键，点击 <code>新建页面</code> 选项，并填写页面的相关信息：</p><p><img src="https://a-xionglijun.github.io/medias/image/2/2-2.e5e761c8.png"></p></li></ol><h4 id="3-2-4-点击轮播图跳转到商品详情页面"><a href="#3-2-4-点击轮播图跳转到商品详情页面" class="headerlink" title="3.2.4 点击轮播图跳转到商品详情页面"></a>3.2.4 点击轮播图跳转到商品详情页面</h4><p>将 <code>&lt;swiper-item&gt;&lt;/swiper-item&gt;</code> 节点内的 <code>view</code> 组件，改造为 <code>navigator</code> 导航组件，并动态绑定 <code>url 属性</code> 的值。</p><ol><li><p>改造之前的 UI 结构：</p><pre><code>&lt;swiper-item v-for="(item, i) in swiperList" :key="i"&gt;  &lt;view class="swiper-item"&gt;    &lt;!-- 动态绑定图片的 src 属性 --&gt;    &lt;image :src="item.image_src"&gt;&lt;/image&gt;  &lt;/view&gt;&lt;/swiper-item&gt;</code></pre></li><li><p>改造之后的 UI 结构：</p><pre><code>&lt;swiper-item v-for="(item, i) in swiperList" :key="i"&gt;    &lt;navigator class="swiper-item" :url="'/subpkg/goods_detail/goods_detail?goods_id=' + item.goods_id"&gt;      &lt;!-- 动态绑定图片的 src 属性 --&gt;      &lt;image :src="item.image_src"&gt;&lt;/image&gt;    &lt;/navigator&gt;&lt;/swiper-item&gt;</code></pre></li></ol><h4 id="3-2-5-封装-uni-showMsg-方法"><a href="#3-2-5-封装-uni-showMsg-方法" class="headerlink" title="3.2.5 封装 uni.$showMsg() 方法"></a>3.2.5 封装 uni.$showMsg() 方法</h4><p>当数据请求失败之后，经常需要调用 <code>uni.showToast({ /* 配置对象 */ })</code> 方法来提示用户。此时，可以在全局封装一个 <code>uni.$showMsg()</code> 方法，来简化 <code>uni.showToast()</code> 方法的调用。具体的改造步骤如下：</p><ol><li><p>在 <code>main.js</code> 中，为 <code>uni</code> 对象挂载自定义的 <code>$showMsg()</code> 方法：</p><pre><code>// 封装的展示消息提示的方法uni.$showMsg = function (title = '数据加载失败！', duration = 1500) {  uni.showToast({    title,    duration,    icon: 'none',  })}</code></pre></li><li><p>今后，在需要提示消息的时候，直接调用 <code>uni.$showMsg()</code> 方法即可：</p><pre><code>async getSwiperList() {   const { data: res } = await uni.$http.get('/api/public/v1/home/swiperdata')   if (res.meta.status !== 200) return uni.$showMsg()   this.swiperList = res.message}</code></pre></li></ol><h3 id="3-3-分类导航区域"><a href="#3-3-分类导航区域" class="headerlink" title="3.3 分类导航区域"></a>3.3 分类导航区域</h3><h4 id="3-3-1-获取分类导航的数据"><a href="#3-3-1-获取分类导航的数据" class="headerlink" title="3.3.1 获取分类导航的数据"></a>3.3.1 获取分类导航的数据</h4><p>实现思路：</p><ol><li>定义 data 数据</li><li>在 onLoad 中调用获取数据的方法</li><li>在 methods 中定义获取数据的方法</li></ol><p>示例代码如下：</p><pre><code>export default {  data() {    return {      // 1. 分类导航的数据列表      navList: [],    }  },  onLoad() {    // 2. 在 onLoad 中调用获取数据的方法    this.getNavList()  },  methods: {    // 3. 在 methods 中定义获取数据的方法    async getNavList() {      const { data: res } = await uni.$http.get('/api/public/v1/home/catitems')      if (res.meta.status !== 200) return uni.$showMsg()      this.navList = res.message    },  },}</code></pre><h4 id="3-3-2-渲染分类导航的-UI-结构"><a href="#3-3-2-渲染分类导航的-UI-结构" class="headerlink" title="3.3.2 渲染分类导航的 UI 结构"></a>3.3.2 渲染分类导航的 UI 结构</h4><ol><li><p>定义如下的 UI 结构：</p><pre><code>&lt;!-- 分类导航区域 --&gt;&lt;view class="nav-list"&gt;   &lt;view class="nav-item" v-for="(item, i) in navList" :key="i"&gt;     &lt;image :src="item.image_src" class="nav-img"&gt;&lt;/image&gt;   &lt;/view&gt;&lt;/view&gt;</code></pre></li><li><p>通过如下的样式美化页面结构：</p><pre><code>.nav-list {  display: flex;  justify-content: space-around;  margin: 15px 0;  .nav-img {    width: 128rpx;    height: 140rpx;  }}</code></pre></li></ol><h4 id="3-3-2-点击第一项，切换到分类页面"><a href="#3-3-2-点击第一项，切换到分类页面" class="headerlink" title="3.3.2 点击第一项，切换到分类页面"></a>3.3.2 点击第一项，切换到分类页面</h4><ol><li><p>为 <code>nav-item</code> 绑定点击事件处理函数：</p><pre><code>&lt;!-- 分类导航区域 --&gt;&lt;view class="nav-list"&gt;  &lt;view class="nav-item" v-for="(item, i) in navList" :key="i" @click="navClickHandler(item)"&gt;    &lt;image :src="item.image_src" class="nav-img"&gt;&lt;/image&gt;  &lt;/view&gt;&lt;/view&gt;</code></pre></li><li><p>定义 <code>navClickHandler</code> 事件处理函数：</p><pre><code>// nav-item 项被点击时候的事件处理函数navClickHandler(item) {  // 判断点击的是哪个 nav  if (item.name === '分类') {    uni.switchTab({      url: '/pages/cate/cate'    })  }}</code></pre></li></ol><h3 id="3-4-楼层区域"><a href="#3-4-楼层区域" class="headerlink" title="3.4 楼层区域"></a>3.4 楼层区域</h3><h4 id="3-4-1-获取楼层数据"><a href="#3-4-1-获取楼层数据" class="headerlink" title="3.4.1 获取楼层数据"></a>3.4.1 获取楼层数据</h4><p>实现思路：</p><ol><li>定义 data 数据</li><li>在 onLoad 中调用获取数据的方法</li><li>在 methods 中定义获取数据的方法</li></ol><p>示例代码如下：</p><pre><code>export default {  data() {    return {      // 1. 楼层的数据列表      floorList: [],    }  },  onLoad() {    // 2. 在 onLoad 中调用获取楼层数据的方法    this.getFloorList()  },  methods: {    // 3. 定义获取楼层列表数据的方法    async getFloorList() {      const { data: res } = await uni.$http.get('/api/public/v1/home/floordata')      if (res.meta.status !== 200) return uni.$showMsg()      this.floorList = res.message    },  },}</code></pre><h4 id="3-4-2-渲染楼层的标题"><a href="#3-4-2-渲染楼层的标题" class="headerlink" title="3.4.2 渲染楼层的标题"></a>3.4.2 渲染楼层的标题</h4><ol><li><p>定义如下的 UI 结构：</p><pre><code>&lt;!-- 楼层区域 --&gt;&lt;view class="floor-list"&gt;  &lt;!-- 楼层 item 项 --&gt;  &lt;view class="floor-item" v-for="(item, i) in floorList" :key="i"&gt;    &lt;!-- 楼层标题 --&gt;    &lt;image :src="item.floor_title.image_src" class="floor-title"&gt;&lt;/image&gt;  &lt;/view&gt;&lt;/view&gt;</code></pre></li><li><p>美化楼层标题的样式：</p><pre><code>.floor-title {  height: 60rpx;  width: 100%;  display: flex;}</code></pre></li></ol><h4 id="3-4-3-渲染楼层里的图片"><a href="#3-4-3-渲染楼层里的图片" class="headerlink" title="3.4.3 渲染楼层里的图片"></a>3.4.3 渲染楼层里的图片</h4><ol><li><p>定义楼层图片区域的 UI 结构：</p><pre><code>&lt;!-- 楼层图片区域 --&gt;&lt;view class="floor-img-box"&gt;  &lt;!-- 左侧大图片的盒子 --&gt;  &lt;view class="left-img-box"&gt;    &lt;image :src="item.product_list[0].image_src" :style="{width: item.product_list[0].image_width + 'rpx'}" mode="widthFix"&gt;&lt;/image&gt;  &lt;/view&gt;  &lt;!-- 右侧 4 个小图片的盒子 --&gt;  &lt;view class="right-img-box"&gt;    &lt;view class="right-img-item" v-for="(item2, i2) in item.product_list" :key="i2" v-if="i2 !== 0"&gt;      &lt;image :src="item2.image_src" mode="widthFix" :style="{width: item2.image_width + 'rpx'}"&gt;&lt;/image&gt;    &lt;/view&gt;  &lt;/view&gt;&lt;/view&gt;</code></pre></li><li><p>美化楼层图片区域的样式：</p><pre><code>.right-img-box {  display: flex;  flex-wrap: wrap;  justify-content: space-around;}.floor-img-box {  display: flex;  padding-left: 10rpx;}</code></pre></li></ol><h4 id="3-4-4-点击楼层图片跳转到商品列表页"><a href="#3-4-4-点击楼层图片跳转到商品列表页" class="headerlink" title="3.4.4 点击楼层图片跳转到商品列表页"></a>3.4.4 点击楼层图片跳转到商品列表页</h4><ol><li><p>在 &nbsp;<code>subpkg</code>&nbsp; 分包中，新建 &nbsp;<code>goods_list</code>&nbsp; 页面</p><p><img src="https://a-xionglijun.github.io/medias/image/2/2-3.de0b01ae.png"></p></li><li><p>楼层数据请求成功之后，通过双层 &nbsp;<code>forEach</code>&nbsp; 循环，处理 URL 地址：</p><pre><code>// 获取楼层列表数据async getFloorList() {  const { data: res } = await uni.$http.get('/api/public/v1/home/floordata')  if (res.meta.status !== 200) return uni.$showMsg()  // 通过双层 forEach 循环，处理 URL 地址  res.message.forEach(floor =&gt; {    floor.product_list.forEach(prod =&gt; {      prod.url = '/subpkg/goods_list/goods_list?' + prod.navigator_url.split('?')[1]    })  })  this.floorList = res.message}</code></pre></li><li><p>把图片外层的 &nbsp;<code>view</code>&nbsp; 组件，改造为 &nbsp;<code>navigator</code>&nbsp; 组件，并动态绑定 &nbsp;<code>url 属性</code>&nbsp; 的值：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 楼层图片区域 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"floor-img-box"</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 左侧大图片的盒子 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>navigator <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"left-img-box"</span> <span class="token punctuation">:</span>url<span class="token operator">=</span><span class="token string">"item.product_list[0].url"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>image <span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"item.product_list[0].image_src"</span> <span class="token punctuation">:</span>style<span class="token operator">=</span><span class="token string">"{width: item.product_list[0].image_width + 'rpx'}"</span> mode<span class="token operator">=</span><span class="token string">"widthFix"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>image<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>navigator<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 右侧 <span class="token number">4</span> 个小图片的盒子 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>view <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right-img-box"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>navigator <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"right-img-item"</span> v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item2, i2) in item.product_list"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"i2"</span> v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"i2 !== 0"</span> <span class="token punctuation">:</span>url<span class="token operator">=</span><span class="token string">"item2.url"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>image <span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"item2.image_src"</span> mode<span class="token operator">=</span><span class="token string">"widthFix"</span> <span class="token punctuation">:</span>style<span class="token operator">=</span><span class="token string">"{width: item2.image_width + 'rpx'}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>image<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>navigator<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>view<span class="token operator">></span></code></pre></li></ol><h3 id="3-5-分支的合并与提交"><a href="#3-5-分支的合并与提交" class="headerlink" title="3.5 分支的合并与提交"></a>3.5 分支的合并与提交</h3><ol><li><p>将本地的 home 分支进行本地的 commit 提交：</p><pre><code>git add .git commit -m "完成了 home 首页的开发"</code></pre></li><li><p>将本地的 home 分支推送到远程仓库进行保存：</p><pre><code>git push -u origin home</code></pre></li><li><p>将本地的 home 分支合并到本地的 master 分支：</p><pre><code>git checkout mastergit merge home</code></pre></li><li><p>删除本地的 home 分支：</p><pre><code>git branch -d home</code></pre></li></ol><h2 id="4-分类"><a href="#4-分类" class="headerlink" title="4.分类"></a>4.分类</h2><h2 id="5-搜索"><a href="#5-搜索" class="headerlink" title="5.搜索"></a>5.搜索</h2><h2 id="6-商品列表"><a href="#6-商品列表" class="headerlink" title="6.商品列表"></a>6.商品列表</h2><h2 id="7-商品详情"><a href="#7-商品详情" class="headerlink" title="7.商品详情"></a>7.商品详情</h2><h2 id="8-加入购物车"><a href="#8-加入购物车" class="headerlink" title="8.加入购物车"></a>8.加入购物车</h2><h2 id="9-购物车页面"><a href="#9-购物车页面" class="headerlink" title="9.购物车页面"></a>9.购物车页面</h2><h2 id="10-登录与支付"><a href="#10-登录与支付" class="headerlink" title="10.登录与支付"></a>10.登录与支付</h2><h2 id="11-发布"><a href="#11-发布" class="headerlink" title="11.发布"></a>11.发布</h2>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>toRGB函数</title>
      <link href="2021/12/22/torgb/"/>
      <url>2021/12/22/torgb/</url>
      
        <content type="html"><![CDATA[<p>转换 CSS 中的颜色编码<br>如：<br>// alert(toRGB(‘#0000FF’)) // 输出 rgb(0, 0, 255)<br>// alert(toRGB(‘invalid’)) // 输出 invalid<br>// alert(toRGB(‘#G00’)) // 输出 #G00</p><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">toRGB</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//设置正则规则</span>  <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^#[0-9a-zA-Z]{3}$/</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">==</span> <span class="token string">'invalid'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">'invalid'</span> <span class="token comment" spellcheck="true">//如果无效返回</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> color  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      str <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//substr()从第i位开始截取2位字符</span>      <span class="token keyword">var</span> ss <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//str 必需。要被解析的字符串。</span>      <span class="token comment" spellcheck="true">// 从 2 到 36，表示字符串的基数。例如指定 16 表示被解析值是十六进制数。请注意，10不是默认值！</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">toRGB</span><span class="token punctuation">(</span><span class="token string">'#0000FF'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出 rgb(0, 0, 255)</span><span class="token comment" spellcheck="true">// alert(toRGB('invalid')) // 输出 invalid</span><span class="token comment" spellcheck="true">// alert(toRGB('#G00')) // 输出 #G00</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 案例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode 同步</title>
      <link href="2021/12/22/settings-sync/"/>
      <url>2021/12/22/settings-sync/</url>
      
        <content type="html"><![CDATA[<h1 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h1><h2 id="配置-Settings-Sync"><a href="#配置-Settings-Sync" class="headerlink" title="配置 Settings Sync"></a>配置 Settings Sync</h2><h3 id="首先下载安装-Settings-Sync"><a href="#首先下载安装-Settings-Sync" class="headerlink" title="首先下载安装 Settings Sync"></a>首先下载安装 Settings Sync</h3><h3 id="在当前界面按-alt-shift-u"><a href="#在当前界面按-alt-shift-u" class="headerlink" title="在当前界面按 alt+shift+u"></a>在当前界面按 alt+shift+u</h3><h3 id="点击用-GitHub-登陆—LOGIN-WITH-GITHUB"><a href="#点击用-GitHub-登陆—LOGIN-WITH-GITHUB" class="headerlink" title="点击用 GitHub 登陆—LOGIN WITH GITHUB"></a>点击用 GitHub 登陆—LOGIN WITH GITHUB</h3><h3 id="登陆成功后返回-vscode"><a href="#登陆成功后返回-vscode" class="headerlink" title="登陆成功后返回 vscode"></a>登陆成功后返回 vscode</h3><h3 id="选择-Github-Gist，会自动检查是否有备份过的-VSCode-的配置，有的话就会看到-Github-Gist-的-id，如果没有，可以新建一个-Gist-用来保存-VsCode-配置信息。当然，你也可以不用以前的新建一个。"><a href="#选择-Github-Gist，会自动检查是否有备份过的-VSCode-的配置，有的话就会看到-Github-Gist-的-id，如果没有，可以新建一个-Gist-用来保存-VsCode-配置信息。当然，你也可以不用以前的新建一个。" class="headerlink" title="选择 Github Gist，会自动检查是否有备份过的 VSCode 的配置，有的话就会看到 Github Gist 的 id，如果没有，可以新建一个 Gist 用来保存 VsCode 配置信息。当然，你也可以不用以前的新建一个。"></a>选择 Github Gist，会自动检查是否有备份过的 VSCode 的配置，有的话就会看到 Github Gist 的 id，如果没有，可以新建一个 Gist 用来保存 VsCode 配置信息。当然，你也可以不用以前的新建一个。</h3><h3 id="按-alt-shift-u-就可以立刻同步了，在输出栏可以看到做了那些更改"><a href="#按-alt-shift-u-就可以立刻同步了，在输出栏可以看到做了那些更改" class="headerlink" title="按 alt+shift+u 就可以立刻同步了，在输出栏可以看到做了那些更改"></a>按 alt+shift+u 就可以立刻同步了，在输出栏可以看到做了那些更改</h3><h1 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h1><ul><li><p>记录自己遇到的一个问题。。。自己把自己坑了半天。。。所以赶紧记下了，省的过几天忘了</p></li><li><p>因为当初看配置教程的时候，没注意到输入完 token 之后还会生成一个 gist id。傻乎乎的以为只需要记录下来 token 就可以了，没有记 gist id。</p></li><li><p>所以在新设备想同步的时候，不知道去哪编 gist id。。看了网上的说法总感觉和我的情况不太相符。</p></li></ul><ol><li>找回 token</li></ol><p>方法很简单：打开 C:\Users&lt;你的用户名&gt;\AppData\Roaming\Code\User\syncLocalSettings.json 。搜索 token 即可找到 token。</p><ol start="2"><li>找回 gist id</li></ol><p>方法同样很简单：VS Code 界面，点击左下角小齿轮，选择设置后，自动打开“User Setting”,搜索 sync.gist，右侧等号后的一串字符为 gist id。</p><p>（找回 gist id 的方法没有科学依据，不知道对错也不知道原理，我在新设备上 gist id 处输入这串字符后，就成功同步了。希望之后能知道为啥。。。）</p><ol start="3"><li>刚发现的</li></ol><p>貌似，旧设备，重新 shift+alt+u 提交一次，输出中也会再打印一遍 token 和 gist id，有待考量。</p><ol start="4"><li>设置同步使用的 GitHub Gist ID <u>940d8159f3959bb98941dd04cc69da47</u></li></ol>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promise和axios</title>
      <link href="2021/12/22/promise-he-axios/"/>
      <url>2021/12/22/promise-he-axios/</url>
      
        <content type="html"><![CDATA[<h3 id="接口调用方式"><a href="#接口调用方式" class="headerlink" title="接口调用方式"></a>接口调用方式</h3><ul><li>原生 ajax</li><li>基于 jQuery 的 ajax</li><li>fetch</li><li>axios</li></ul><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul><li>JavaScript 的执行环境是「单线程」</li><li>所谓单线程，是指 JS 引擎中负责解释和执行 JavaScript 代码的线程只有一个，也就是一次只能完成一项任务，这个任务执行完后才能执行下一个，它会「阻塞」其他任务。这个任务可称为主线程</li><li>异步模式可以一起执行<strong>多个任务</strong></li><li>JS 中常见的异步调用<ul><li>定时任何</li><li>ajax</li><li>事件函数</li></ul></li></ul><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><ul><li>主要解决异步深层嵌套的问题</li><li>promise 提供了简洁的 API 使得异步操作更加容易</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">/*     1. Promise基本使用           我们使用new来构建一个Promise  Promise的构造函数接收一个参数，是函数，并且传入两个参数：           resolve，reject， 分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数    */</span>  <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//2. 这里用于实现异步任务  setTimeout</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//3. 正常情况</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//4. 异常情况</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//  5 Promise实例生成以后，可以用then方法指定resolved状态和reject状态的回调函数</span>  <span class="token comment" spellcheck="true">//  在then方法中，你也可以直接return数据而不是Promise对象，在后面的then中就可以接收到数据了</span>  p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="基于-Promise-发送-Ajax-请求"><a href="#基于-Promise-发送-Ajax-请求" class="headerlink" title="基于 Promise 发送 Ajax 请求"></a>基于 Promise 发送 Ajax 请求</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">     <span class="token comment" spellcheck="true">/*       基于Promise发送Ajax请求     */</span>     <span class="token keyword">function</span> <span class="token function">queryData</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>      #   <span class="token number">1.1</span> 创建一个Promise实例       <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             # <span class="token number">1.2</span> 处理正常的情况             <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>             # <span class="token number">1.3</span> 处理异常情况             <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'服务器错误'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token punctuation">;</span>         xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>         xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> p<span class="token punctuation">;</span>     <span class="token punctuation">}</span>  # 注意：  这里需要开启一个服务     # 在then方法中，你也可以直接<span class="token keyword">return</span>数据而不是Promise对象，在后面的then中就可以接收到数据了     <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data'</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>         #  <span class="token number">1.4</span> 想要继续链式编程下去 需要 <span class="token keyword">return</span>         <span class="token keyword">return</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="Promise-基本-API"><a href="#Promise-基本-API" class="headerlink" title="Promise 基本 API"></a>Promise 基本 API</h3><h4 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h4><h5 id="then"><a href="#then" class="headerlink" title=".then()"></a>.then()</h5><ul><li>得到异步任务正确的结果</li></ul><h5 id="catch"><a href="#catch" class="headerlink" title=".catch()"></a>.catch()</h5><ul><li>获取异常信息</li></ul><h5 id="finally"><a href="#finally" class="headerlink" title=".finally()"></a>.finally()</h5><ul><li>成功与否都会执行（不是正式标准）</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">/*    Promise常用API-实例方法  */</span>  <span class="token comment" spellcheck="true">// console.dir(Promise);</span>  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// resolve(123);</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// foo()</span>  <span class="token comment" spellcheck="true">//   .then(function(data){</span>  <span class="token comment" spellcheck="true">//     console.log(data)</span>  <span class="token comment" spellcheck="true">//   })</span>  <span class="token comment" spellcheck="true">//   .catch(function(data){</span>  <span class="token comment" spellcheck="true">//     console.log(data)</span>  <span class="token comment" spellcheck="true">//   })</span>  <span class="token comment" spellcheck="true">//   .finally(function(){</span>  <span class="token comment" spellcheck="true">//     console.log('finished')</span>  <span class="token comment" spellcheck="true">//   });</span>  <span class="token comment" spellcheck="true">// --------------------------</span>  <span class="token comment" spellcheck="true">// 两种写法是等效的</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>      # 得到异步任务正确的结果      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>      # 获取异常信息      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    # 成功与否都会执行（不是正式标准）    <span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finished'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><h5 id="all"><a href="#all" class="headerlink" title=".all()"></a>.all()</h5><ul><li><code>Promise.all</code>方法接受一个数组作参数，数组中的对象（p1、p2、p3）均为 promise 实例（如果不是一个 promise，该项会被用<code>Promise.resolve</code>转换为一个 promise)。它的状态由这三个 promise 实例决定</li></ul><h5 id="race"><a href="#race" class="headerlink" title=".race()"></a>.race()</h5><ul><li><p><code>Promise.race</code>方法同样接受一个数组作参数。当 p1, p2, p3 中有一个实例的状态发生改变（变为<code>fulfilled</code>或<code>rejected</code>），p 的状态就跟着改变。并把第一个改变状态的 promise 的返回值，传给 p 的回调函数</p><p>​</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">/*      Promise常用API-对象方法    */</span>  <span class="token comment" spellcheck="true">// console.dir(Promise)</span>  <span class="token keyword">function</span> <span class="token function">queryData</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 处理正常的情况</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 处理异常情况</span>          <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'服务器错误'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>      xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/a1'</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/a2'</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/a3'</span><span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//   all 中的参数  [p1,p2,p3]   和 返回的结果一 一对应["HELLO TOM", "HELLO JERRY", "HELLO SPIKE"]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//["HELLO TOM", "HELLO JERRY", "HELLO SPIKE"]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 由于p1执行较快，Promise的then()将获得结果'P1'。p2,p3仍在继续执行，但执行结果将被丢弃。</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "HELLO TOM"</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><ul><li>Fetch API 是新的 ajax 解决方案 Fetch 会返回 Promise</li><li><strong>fetch 不是 ajax 的进一步封装，而是原生 js，没有使用 XMLHttpRequest 对象</strong>。</li><li>fetch(url, options).then(）</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">/*      Fetch API 基本用法          fetch(url).then()         第一个参数请求的路径   Fetch会返回Promise   所以我们可以使用then 拿到请求成功的结果     */</span>  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/fdata'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// text()方法属于fetchAPI的一部分，它返回一个Promise实例对象，用于获取后台返回的数据</span>      <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//   在这个then里面我们能拿到最终的数据</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="fetch-API-中的-HTTP-请求"><a href="#fetch-API-中的-HTTP-请求" class="headerlink" title="fetch API 中的 HTTP 请求"></a>fetch API 中的 HTTP 请求</h4><ul><li>fetch(url, options).then(）</li><li>HTTP 协议，它给我们提供了很多的方法，如 POST，GET，DELETE，UPDATE，PATCH 和 PUT<ul><li>默认的是 GET 请求</li><li>需要在 options 对象中 指定对应的 method method:请求使用的方法</li><li>post 和 普通 请求的时候 需要在 options 中 设置 请求头 headers 和 body</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*          Fetch API 调用接口传递参数    */</span>   #<span class="token number">1.1</span> GET参数传递 <span class="token operator">-</span> 传统URL  通过url  ？ 的形式传参    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/books?id=123'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            # <span class="token keyword">get</span> 请求可以省略不写 默认的是GET            method<span class="token punctuation">:</span> <span class="token string">'get'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            # 它返回一个Promise实例对象，用于获取后台返回的数据            <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            # 在这个then里面我们能拿到最终的数据            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  #<span class="token number">1.2</span>  GET参数传递  restful形式的URL  通过<span class="token operator">/</span> 的形式传递参数  即  id <span class="token operator">=</span> <span class="token number">456</span> 和id后台的配置有关    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/books/456'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            # <span class="token keyword">get</span> 请求可以省略不写 默认的是GET            method<span class="token punctuation">:</span> <span class="token string">'get'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   #<span class="token number">2.1</span>  DELETE请求方式参数传递      删除id  是  id<span class="token operator">=</span><span class="token number">789</span>    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/books/789'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            method<span class="token punctuation">:</span> <span class="token string">'delete'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   #<span class="token number">3</span> POST请求传参    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/books'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>            # <span class="token number">3.1</span>  传递数据            body<span class="token punctuation">:</span> <span class="token string">'uname=lisi&amp;pwd=123'</span><span class="token punctuation">,</span>            #  <span class="token number">3.2</span>  设置请求头            headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   # POST请求传参    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/books'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>            body<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                uname<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>                pwd<span class="token punctuation">:</span> <span class="token string">'456'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    # PUT请求传参     修改id 是 <span class="token number">123</span> 的    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/books/123'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            method<span class="token punctuation">:</span> <span class="token string">'put'</span><span class="token punctuation">,</span>            body<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                uname<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>                pwd<span class="token punctuation">:</span> <span class="token string">'789'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="fetchAPI-中-响应格式"><a href="#fetchAPI-中-响应格式" class="headerlink" title="fetchAPI 中 响应格式"></a>fetchAPI 中 响应格式</h4><ul><li>用 fetch 来获取数据，如果响应正常返回，我们首先看到的是一个 response 对象，其中包括返回的一堆原始字节，这些字节需要在收到后，需要我们通过调用方法将其转换为相应格式的数据，比如<code>JSON</code>，<code>BLOB</code>或者<code>TEXT</code>等等</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*      Fetch响应结果的数据格式    */</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/json'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return data.json();   //  将获取到的数据使用 json 转换对象</span>    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//  //  将获取到的数据 转换成字符串</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(data.uname)</span>    <span class="token comment" spellcheck="true">// console.log(typeof data)</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>uname<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>gender<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><ul><li>基于 promise 用于浏览器和 node.js 的 http 客户端</li><li>支持浏览器和 node.js</li><li>支持 promise</li><li>能拦截请求和响应</li><li>自动转换 JSON 数据</li><li>能转换请求和响应数据</li></ul><h4 id="axios-基础用法"><a href="#axios-基础用法" class="headerlink" title="axios 基础用法"></a>axios 基础用法</h4><ul><li>get 和 delete 请求传递参数<ul><li>通过传统的 url 以 ? 的形式传递参数</li><li>restful 形式传递参数</li><li>通过 params 形式传递参数</li></ul></li><li>post 和 put 请求传递参数<ul><li>通过选项传递参数</li><li>通过 URLSearchParams 传递参数</li></ul></li></ul><pre class=" language-js"><code class="language-js">    # <span class="token number">1</span><span class="token punctuation">.</span> 发送<span class="token keyword">get</span> 请求    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/adata'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      #  拿到 ret 是一个对象      所有的对象都存在 ret 的data 属性里面      <span class="token comment" spellcheck="true">// 注意data属性是固定的用法，用于获取后台的实际数据</span>      <span class="token comment" spellcheck="true">// console.log(ret.data)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    # <span class="token number">2</span><span class="token punctuation">.</span>  <span class="token keyword">get</span> 请求传递参数    # <span class="token number">2.1</span>  通过传统的url  以 <span class="token operator">?</span> 的形式传递参数    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios?id=123'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    # <span class="token number">2.2</span>  restful 形式传递参数    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios/123'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    # <span class="token number">2.3</span>  通过params  形式传递参数    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      params<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">789</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    #<span class="token number">3</span> axios <span class="token keyword">delete</span> 请求传参     传参的形式和 <span class="token keyword">get</span> 请求一样    axios<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      params<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">111</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    # <span class="token number">4</span>  axios 的 post 请求    # <span class="token number">4.1</span>  通过选项传递参数    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      uname<span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span>      pwd<span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    # <span class="token number">4.2</span>  通过 URLSearchParams  传递参数    <span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">,</span> <span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>     #<span class="token number">5</span>  axios put 请求传参   和 post 请求一样    axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios/123'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      uname<span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span>      pwd<span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="axios-全局配置"><a href="#axios-全局配置" class="headerlink" title="axios 全局配置"></a>axios 全局配置</h4><pre class=" language-js"><code class="language-js">#  配置公共的请求头axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'https://api.example.com'</span><span class="token punctuation">;</span>#  配置 超时时间axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">2500</span><span class="token punctuation">;</span>#  配置公共的请求头axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>common<span class="token punctuation">[</span><span class="token string">'Authorization'</span><span class="token punctuation">]</span> <span class="token operator">=</span> AUTH_TOKEN<span class="token punctuation">;</span># 配置公共的 post 的 Content<span class="token operator">-</span>Typeaxios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>post<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">;</span></code></pre><h4 id="axios-拦截器"><a href="#axios-拦截器" class="headerlink" title="axios 拦截器"></a>axios 拦截器</h4><ul><li>请求拦截器<ul><li>请求拦截器的作用是在请求发送前进行一些操作<ul><li>例如在每个请求体里加上 token，统一做了处理如果以后要改也非常容易</li></ul></li></ul></li><li>响应拦截器<ul><li>响应拦截器的作用是在接收到响应后进行一些操作<ul><li>例如在服务器返回登录状态失效，需要重新登录的时候，跳转到登录页</li></ul></li></ul></li></ul><pre class=" language-js"><code class="language-js">    # <span class="token number">1</span><span class="token punctuation">.</span> 请求拦截器    axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>url<span class="token punctuation">)</span>      # <span class="token number">1.1</span>  任何请求都会经过这一步   在发送请求之前做些什么      config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>mytoken <span class="token operator">=</span> <span class="token string">'nihao'</span><span class="token punctuation">;</span>      # <span class="token number">1.2</span>  这里一定要<span class="token keyword">return</span>   否则配置不成功      <span class="token keyword">return</span> config<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>       #<span class="token number">1.3</span> 对请求错误做点什么      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    #<span class="token number">2</span><span class="token punctuation">.</span> 响应拦截器    axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>      #<span class="token number">2.1</span>  在接收响应做些什么      <span class="token keyword">var</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>      <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>      #<span class="token number">2.2</span> 对响应错误做点什么      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h3><ul><li>async 作为一个关键字放到函数前面<ul><li>任何一个<code>async</code>函数都会隐式返回一个<code>promise</code></li></ul></li><li><code>await</code>关键字只能在使用<code>async</code>定义的函数中使用<ul><li>​ await 后面可以直接跟一个 Promise 实例对象</li><li>​ await 函数不能单独使用</li></ul></li><li><strong>async/await 让异步代码看起来、表现起来更像同步代码</strong></li></ul><pre class=" language-js"><code class="language-js">     # <span class="token number">1</span><span class="token punctuation">.</span>  <span class="token keyword">async</span> 基础用法    # <span class="token number">1.1</span> <span class="token keyword">async</span>作为一个关键字放到函数前面    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      # <span class="token number">1.2</span> <span class="token keyword">await</span>关键字只能在使用<span class="token keyword">async</span>定义的函数中使用      <span class="token keyword">await</span>后面可以直接跟一个 Promise实例对象      <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'nihao'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// console.log(ret.data)</span>      <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    # <span class="token number">1.3</span> 任何一个<span class="token keyword">async</span>函数都会隐式返回一个promise   我们可以使用then 进行链式编程    <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    #<span class="token number">2</span><span class="token punctuation">.</span>  <span class="token keyword">async</span>    函数处理多个异步函数    axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://localhost:3000'</span><span class="token punctuation">;</span>    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      # <span class="token number">2.1</span>  添加<span class="token keyword">await</span>之后 当前的<span class="token keyword">await</span> 返回结果之后才会执行后面的代码      <span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'async1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      #<span class="token number">2.2</span>  让异步代码看起来、表现起来更像同步代码      <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'async2?info='</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> ret<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>keep-alive内置组件的作用</title>
      <link href="2021/12/22/keep-alive/"/>
      <url>2021/12/22/keep-alive/</url>
      
        <content type="html"><![CDATA[<h5 id="利用-Vue-中-keep-alive，快速实现页面缓存"><a href="#利用-Vue-中-keep-alive，快速实现页面缓存" class="headerlink" title="利用 Vue 中 keep-alive，快速实现页面缓存"></a>利用 Vue 中 keep-alive，快速实现页面缓存</h5><p>可以让当前组件或者路由不经历创建和销毁，而是进行缓存，凡是被 keep-alive 组件包裹的组件，除了第一次以外。不会经历创建和销毁阶段的。第一次创建后就会缓存到缓存当中<br>有时候我们不希望组件被重新渲染影响使用体验；或者处于性能考虑，避免多次重复渲染降低性能。而是希望组件可以缓存下来,维持当前的状态。这时候就可以用到 keep-alive 组件。<a href="https://cn.vuejs.org/v2/api/#keep-alive">https://cn.vuejs.org/v2/api/#keep-alive</a></p><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><p>如果未使用 keep-alive 组件，则在页面回退时仍然会重新渲染页面，触发 created 钩子，使用体验不好。 在以下场景中使用 keep-alive 组件会显著提高用户体验，菜单存在多级关系，多见于列表页+详情页的场景如：</p><ul><li>商品列表页点击商品跳转到商品详情，返回后仍显示原有信息</li><li>订单列表跳转到订单详情，返回，等等场景。</li></ul><h5 id="keep-alive-的生命周期"><a href="#keep-alive-的生命周期" class="headerlink" title="keep-alive 的生命周期"></a>keep-alive 的生命周期</h5><ul><li>初次进入时：created &gt; mounted &gt; activated；退出后触发 deactivated</li><li>再次进入：会触发 activated；事件挂载的方法等，只执行一次的放在 mounted 中；组件每次进去执行的方法放在 activated 中</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keep-alive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>副本</title>
      <link href="2021/12/22/index-fu-ben/"/>
      <url>2021/12/22/index-fu-ben/</url>
      
        <content type="html"><![CDATA[<h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><h3 id="实现功能-1"><a href="#实现功能-1" class="headerlink" title="实现功能"></a>实现功能</h3><h3 id="实现功能-2"><a href="#实现功能-2" class="headerlink" title="实现功能"></a>实现功能</h3><h3 id="实现功能-3"><a href="#实现功能-3" class="headerlink" title="实现功能"></a>实现功能</h3><h3 id="实现功能-4"><a href="#实现功能-4" class="headerlink" title="实现功能"></a>实现功能</h3><h3 id="实现功能-5"><a href="#实现功能-5" class="headerlink" title="实现功能"></a>实现功能</h3><h3 id="实现功能-6"><a href="#实现功能-6" class="headerlink" title="实现功能"></a>实现功能</h3><h3 id="实现功能-7"><a href="#实现功能-7" class="headerlink" title="实现功能"></a>实现功能</h3><h3 id="实现功能-8"><a href="#实现功能-8" class="headerlink" title="实现功能"></a>实现功能</h3><h3 id="实现功能-9"><a href="#实现功能-9" class="headerlink" title="实现功能"></a>实现功能</h3><h3 id="实现功能-10"><a href="#实现功能-10" class="headerlink" title="实现功能"></a>实现功能</h3><h3 id="实现功能-11"><a href="#实现功能-11" class="headerlink" title="实现功能"></a>实现功能</h3><h3 id="实现功能-12"><a href="#实现功能-12" class="headerlink" title="实现功能"></a>实现功能</h3><h3 id="实现功能-13"><a href="#实现功能-13" class="headerlink" title="实现功能"></a>实现功能</h3><h3 id="实现功能-14"><a href="#实现功能-14" class="headerlink" title="实现功能"></a>实现功能</h3>]]></content>
      
      
      <categories>
          
          <category> 副本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 副本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/12/22/hello-world/"/>
      <url>2021/12/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hello World </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-02</title>
      <link href="2021/12/22/git-02/"/>
      <url>2021/12/22/git-02/</url>
      
        <content type="html"><![CDATA[<h4 id="生成-SSH-key"><a href="#生成-SSH-key" class="headerlink" title="生成 SSH key"></a>生成 SSH key</h4><p>① 打开 Git Bash</p><p>② 粘贴如下的命令，并将 <code>your_email@example.com</code> 替换为注册 <code>Github</code> 账号时填写的邮箱：</p><ul><li><code>ssh-keygen -t rsa -b 4096 -C "your_email@example.com"</code></li></ul><p>③ 连续敲击 3 次回车，即可在 <code>C:\Users\用户名文件夹\.ssh</code> 目录中生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件</p><h4 id="配置-SSH-key"><a href="#配置-SSH-key" class="headerlink" title="配置 SSH key"></a>配置 SSH key</h4><p>① 使用记事本打开 <code>id_rsa.pub</code> 文件，复制里面的文本内容</p><p>② 在浏览器中登录 <code>Github</code>，点击头像 -&gt; <code>Settings -&gt; SSH and GPG Keys -&gt; New SSH key</code></p><p>③ 将 <code>id_rsa.pub</code> 文件中的内容，粘贴到 <code>Key</code> 对应的文本框中</p><p>④ 在 <code>Title</code> 文本框中任意填写一个名称，来标识这个 <code>Key</code> 从何而来</p><h4 id="检测-Github-的-SSH-key-是否配置成功"><a href="#检测-Github-的-SSH-key-是否配置成功" class="headerlink" title="检测 Github 的 SSH key 是否配置成功"></a>检测 <code>Github</code> 的 <code>SSH key</code> 是否配置成功</h4><ul><li><p>打开 <code>Git Bash</code>，输入如下的命令并回车执行：</p><pre class=" language-shell"><code class="language-shell">ssh -T git@github.com</code></pre></li><li><p>上述的命令执行成功后，可能会看到提示消息</p></li><li><p>输入 <code>yes</code> 之后，如果能看到类似于下面的提示消息，证明 <code>SSH key</code> 已经配置成功了：</p></li></ul><h4 id="基于-SSH-将本地仓库上传到-Github"><a href="#基于-SSH-将本地仓库上传到-Github" class="headerlink" title="基于 SSH 将本地仓库上传到 Github"></a>基于 SSH 将本地仓库上传到 <code>Github</code></h4><p><strong>注意：</strong> <code>git push origin master</code> 也能进行提交，<code>git push origin -u</code> 的话可以提交代码，并且把<code>origin</code> 当作默认的主机，后续直接 <code>git push</code> 就可以提交到<code>origin</code>对应的主机</p><h4 id="将远程仓库克隆到本地"><a href="#将远程仓库克隆到本地" class="headerlink" title="将远程仓库克隆到本地"></a>将远程仓库克隆到本地</h4><p>打开 <code>Git Bash</code>，输入如下的命令并回车执行：</p><pre class=" language-shell"><code class="language-shell">git clone 远程仓库的地址</code></pre><h1 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a><code>Git</code>分支</h1><h2 id="分支的概念"><a href="#分支的概念" class="headerlink" title="分支的概念"></a>分支的概念</h2><h2 id="master-主分支"><a href="#master-主分支" class="headerlink" title="master 主分支"></a>master 主分支</h2><p>在初始化本地 <code>Git</code> 仓库的时候，<code>Git</code> 默认已经帮我们创建了一个名字叫做 <code>master</code> 的分支。通常我们把这个</p><p><code>master</code> 分支叫做主分支。</p><p>在实际工作中，<code>master</code> 主分支的作用是：<strong>用来保存和记录整个项目已完成的功能代码</strong>。</p><p>因此，<strong>不允许程序员直接在 <code>master</code> 分支上修改代码</strong>，因为这样做的风险太高，容易导致整个项目崩溃。</p><h2 id="功能分支"><a href="#功能分支" class="headerlink" title="功能分支"></a>功能分支</h2><p>由于程序员不能直接在 <code>master</code> 分支上进行功能的开发，所以就有了功能分支的概念。</p><p><strong>功能分支</strong>指的是专门用来开发新功能的分支，它是临时从 <code>master</code> 主分支上分叉出来的，当新功能开发且测试</p><p>完毕后，最终需要合并到 <code>master</code> 主分支上</p><h2 id="查看分支列表-⭐⭐⭐"><a href="#查看分支列表-⭐⭐⭐" class="headerlink" title="查看分支列表(⭐⭐⭐)"></a>查看分支列表(⭐⭐⭐)</h2><p>使用如下的命令，可以查看当前 Git 仓库中所有的分支列表：</p><pre class=" language-shell"><code class="language-shell">git branch</code></pre><p>运行的结果如下所示：</p><p><img src="images/%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF.png"></p><p><strong>注意：</strong>分支名字前面的 <strong>*</strong> 号表示当前所处的分支。</p><h2 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h2><p>使用如下的命令，可以<strong>基于当前分支</strong>，<strong>创建一个新的分支</strong>，此时，新分支中的代码和当前分支完全一样：</p><pre><code>git branch 分支名称</code></pre><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><p>使用如下的命令，可以<strong>切换到指定的分支上</strong>进行开发：</p><pre class=" language-shell"><code class="language-shell">git checkout login</code></pre><h2 id="分支的快速创建和切换-⭐⭐⭐"><a href="#分支的快速创建和切换-⭐⭐⭐" class="headerlink" title="分支的快速创建和切换(⭐⭐⭐)"></a>分支的快速创建和切换(⭐⭐⭐)</h2><p>使用如下的命令，可以<strong>创建指定名称的新分支</strong>，并<strong>立即切换到新分支上</strong>：</p><pre class=" language-shell"><code class="language-shell"># -b 表示创建一个新分支# checkout 表示切换到刚才新建的分支上git checkout -b 分支名称</code></pre><p><strong>注意：</strong></p><p>“<code>git checkout -b 分支名称</code>“ 是下面</p><p>两条命令的简写形式：</p><p>① <code>git branch</code> 分支名称</p><p>② <code>git checkout</code> 分支名称</p><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>功能分支的代码开发测试完毕之后，可以使用如下的命令，将完成后的代码合并到 <code>master</code> 主分支上：</p><pre class=" language-shell"><code class="language-shell"># 1. 切换到 master 分支git checkout master# 2. 在master 分支上运行 git merge 命令，将 login 分支的代码合班到 master 分支git merge login</code></pre><p><strong>合并分支时的注意点</strong>：</p><p>假设要把 C 分支的代码合并到 A 分支，</p><p>则必须<strong>先切换到 A 分支</strong>上，<strong>再运行 git merge 命令</strong>，来合并 C 分支！</p><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p>当把功能分支的代码合并到 <code>master</code> 主分支上以后，就可以使用如下的命令，删除对应的功能分支：</p><pre class=" language-shell"><code class="language-shell">git branch -d 分支名称</code></pre><h2 id="遇到冲突时的分支合并"><a href="#遇到冲突时的分支合并" class="headerlink" title="遇到冲突时的分支合并"></a>遇到冲突时的分支合并</h2><p>如果<strong>在两个不同的分支中</strong>，对<strong>同一个文件</strong>进行了<strong>不同的修改</strong>，Git 就没法干净的合并它们。 此时，我们需要打开</p><p>这些包含冲突的文件然后<strong>手动解决冲突</strong>。</p><pre class=" language-shell"><code class="language-shell"># 假设：在把 reg 分支合并到 master 分支期间git checkout mastergit merge reg# 打开包含冲突的文件，手动解决冲突之后，再执行如下命令git add .git commit -m "解决了分支合并冲突的问题"</code></pre><h1 id="远程分支操作"><a href="#远程分支操作" class="headerlink" title="远程分支操作"></a>远程分支操作</h1><h2 id="将本地分支推送到远程仓库-⭐⭐⭐"><a href="#将本地分支推送到远程仓库-⭐⭐⭐" class="headerlink" title="将本地分支推送到远程仓库(⭐⭐⭐)"></a>将本地分支推送到远程仓库(⭐⭐⭐)</h2><p>如果是<strong>第一次</strong>将本地分支推送到远程仓库，需要运行如下的命令：</p><pre class=" language-shell"><code class="language-shell"># -u 表示把本地分支和远程分支进行关联，只在第一次推送的时候需要带 -u 参数git push -u 远程仓库的别名 本地分支名称:远程分支名称# 实际案例git push -u origin payment:pay# 如果希望远程分支的名称和本地分支名称保持一致，可以对命令进行简化git push -u origin payment</code></pre><p><strong>注意：</strong>第一次推送分支需要带 <strong>-u 参数</strong>，此后可以直接使用 <code>git push</code> 推送代码到远程分支。</p><h2 id="查看远程仓库中所有的分支列表"><a href="#查看远程仓库中所有的分支列表" class="headerlink" title="查看远程仓库中所有的分支列表"></a>查看远程仓库中所有的分支列表</h2><p>通过如下的命令，可以查看远程仓库中，所有的分支列表的信息：</p><pre class=" language-shell"><code class="language-shell">git remote show 远程仓库名称</code></pre><h2 id="拉取远程仓库中指定分支"><a href="#拉取远程仓库中指定分支" class="headerlink" title="拉取远程仓库中指定分支"></a>拉取远程仓库中指定分支</h2><pre class=" language-shell"><code class="language-shell">git fetch git@gitee.com:zhoushugang/hmmm-frontend-100-01.git develop:develop</code></pre><h2 id="跟踪分支-⭐⭐⭐"><a href="#跟踪分支-⭐⭐⭐" class="headerlink" title="跟踪分支(⭐⭐⭐)"></a>跟踪分支(⭐⭐⭐)</h2><p>跟踪分支指的是：从远程仓库中，把远程分支下载到本地仓库中。需要运行的命令如下：</p><pre class=" language-shell"><code class="language-shell"># 示例git checkout pay# 从远程仓库中，把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名git checkout -b 本地分支名称 远程仓库名称/远程分支名称# 示例git checkout -b payment origin/pay</code></pre><h2 id="拉取远程分支的最新的代码"><a href="#拉取远程分支的最新的代码" class="headerlink" title="拉取远程分支的最新的代码"></a>拉取远程分支的最新的代码</h2><p>可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中:</p><pre class=" language-shell"><code class="language-shell"># 从远程仓库，拉取当前分支最新的代码，保持当前分支的代码和远程分支代码一致git pull</code></pre><h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><p>可以使用如下的命令，删除远程仓库中指定的分支：</p><pre class=" language-shell"><code class="language-shell"># 删除远程仓库中，制定名称的远程分支git push 远程仓库名称 --delete 远程分支名称# 示例git push origin --delete pay</code></pre>]]></content>
      
      
      <categories>
          
          <category> 安装配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-01</title>
      <link href="2021/12/22/git-01/"/>
      <url>2021/12/22/git-01/</url>
      
        <content type="html"><![CDATA[<h2 id="Git-基础概念"><a href="#Git-基础概念" class="headerlink" title="Git 基础概念"></a>Git 基础概念</h2><h3 id="什么是-Git"><a href="#什么是-Git" class="headerlink" title="什么是 Git"></a>什么是 Git</h3><p><code>Git</code> 是一个<strong>开源的分布式版本控制系统</strong>，是目前世界上<strong>最先进</strong>、<strong>最流行</strong>的版本控制系统。可以快速高效地处理从很小到非常大的项目版本管理。</p><p>特点：项目越大越复杂，协同开发者越多，越能体现出 Git 的<strong>高性能</strong>和<strong>高可用性</strong>！</p><h3 id="Git-的特性-⭐⭐⭐"><a href="#Git-的特性-⭐⭐⭐" class="headerlink" title="Git 的特性(⭐⭐⭐)"></a><strong>Git 的特性</strong>(⭐⭐⭐)</h3><p>Git 之所以快速和高效，主要依赖于它的如下两个特性：</p><p>① 直接记录快照，而非差异比较</p><p>② 近乎所有操作都是本地执行</p><h4 id="SVN-的差异比较"><a href="#SVN-的差异比较" class="headerlink" title="SVN 的差异比较"></a><code>SVN</code> 的差异比较</h4><p>传统的版本控制系统（例如 <code>SVN</code>）是<strong>基于差异</strong>的版本控制，它们存储的是<strong>一组基本文件</strong>和<strong>每个文件随时间逐步累积的差异</strong></p><p><strong>好处：</strong>节省磁盘空间</p><p><strong>缺点：</strong>耗时、效率低</p><p>​ 在每次切换版本的时候，都需要在基本文件的基础上，应用每个差异，从而生成目标版本对应的文件</p><h3 id="Git-中的三种状态"><a href="#Git-中的三种状态" class="headerlink" title="Git 中的三种状态"></a><code>Git</code> 中的三种状态</h3><ul><li><p><strong>已修改 <code>modified</code></strong></p><ul><li>表示修改了文件，但还没将修改的结果放到<strong>暂存区</strong></li></ul></li><li><p><strong>已暂存 <code>staged</code></strong></p><ul><li>表示对已修改文件的当前版本做了标记，使之包含在<strong>下次提交的列表中</strong></li></ul></li><li><p><strong>已提交 <code>committed</code></strong></p><ul><li>表示文件已经安全地保存在本地的 <strong>Git 仓库中</strong></li></ul></li></ul><p><strong>注意：</strong></p><ul><li>工作区的文件被修改了，但还没有放到暂存区，就是<strong>已修改</strong>状态。</li><li>如果文件已修改并放入暂存区，就属于<strong>已暂存</strong>状态。</li><li>如果 Git 仓库中<strong>保存着特定版本</strong>的文件，就属于<strong>已提交</strong>状态。</li></ul><h1 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a><code>Git</code>基础</h1><h2 id="安装并配置-Git"><a href="#安装并配置-Git" class="headerlink" title="安装并配置 Git"></a>安装并配置 Git</h2><h3 id="在-Windows-中下载并安装-Git"><a href="#在-Windows-中下载并安装-Git" class="headerlink" title="在 Windows 中下载并安装 Git"></a>在 <code>Windows</code> 中下载并安装 <code>Git</code></h3><p>在开始使用 <code>Git</code> 管理项目的版本之前，需要将它安装到计算机上。可以使用浏览器访问如下的网址，根据自己</p><p>的操作系统，选择下载对应的 <code>Git</code> 安装包：</p><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><h3 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h3><p>安装完 <code>Git</code> 之后，要做的第一件事就是设置自己的<strong>用户名</strong>和<strong>邮件地址</strong>。因为通过 <code>Git</code> 对项目进行版本管理的时</p><p>候，<code>Git</code> 需要使用这些基本信息，来记录是谁对项目进行了操作：</p><pre><code>git config --global user.name "itheima"git config --global user.email "itheima@itcast.cn"</code></pre><p><strong>注意：</strong>如果使用了 –global 选项，那么该命令只需要运行一次，即可永久生效。</p><h3 id="Git-的全局配置文件"><a href="#Git-的全局配置文件" class="headerlink" title="Git 的全局配置文件"></a>Git 的全局配置文件</h3><p>通过 <code>git config --global user.name</code> 和 <code>git config --global user.email</code> 配置的用户名和邮箱地址，会被写</p><p>入到 <code>C:/Users/用户名文件夹/.gitconfig</code> 文件中。这个文件是 <code>Git</code> 的<strong>全局配置文件</strong>，<strong>配置一次即可永久生效</strong>。</p><p>可以使用记事本打开此文件，从而查看自己曾经对 Git 做了哪些全局性的配置。</p><h3 id="检查配置信息"><a href="#检查配置信息" class="headerlink" title="检查配置信息"></a>检查配置信息</h3><p>除了使用记事本查看全局的配置信息之外，还可以运行如下的终端命令，快速的查看 Git 的全局配置信息：</p><pre class=" language-shell"><code class="language-shell"># 查看所有的全局配置项git config --list --global# 查看指定的全局配置项git config user.namegit config user.email</code></pre><h3 id="获取帮助信息"><a href="#获取帮助信息" class="headerlink" title="获取帮助信息"></a>获取帮助信息</h3><p>可以使用 <code>git help &lt;verb&gt;</code> 命令，无需联网即可在浏览器中打开帮助手册，例如：</p><pre class=" language-shell"><code class="language-shell"># 打开 git config 命令的帮助手册git help config</code></pre><p>如果不想查看完整的手册，那么可以用 -h 选项获得更简明的“help”输出：</p><pre class=" language-shell"><code class="language-shell"># 想要获取 git config 命令的快速参考git config -h</code></pre><h2 id="Git-的基本操作"><a href="#Git-的基本操作" class="headerlink" title="Git 的基本操作"></a><code>Git</code> 的基本操作</h2><h3 id="获取-Git-仓库的两种方式"><a href="#获取-Git-仓库的两种方式" class="headerlink" title="获取 Git 仓库的两种方式"></a>获取 <code>Git</code> 仓库的两种方式</h3><p>① 将尚未进行版本控制的本地目录<strong>转换</strong>为 <code>Git</code> 仓库</p><p>② 从其它服务器<strong>克隆</strong>一个已存在的 <code>Git</code> 仓库</p><p>以上两种方式都能够在自己的电脑上得到一个可用的 Git 仓库</p><h3 id="在现有目录中初始化仓库-⭐⭐⭐"><a href="#在现有目录中初始化仓库-⭐⭐⭐" class="headerlink" title="在现有目录中初始化仓库(⭐⭐⭐)"></a>在现有目录中初始化仓库(⭐⭐⭐)</h3><p>如果自己有一个尚未进行版本控制的项目目录，想要用 <code>Git</code> 来控制它，需要执行如下两个步骤：</p><p>① 在项目目录中，通过鼠标右键打开“<code>Git Bash</code>”</p><p>② 执行 <code>git init</code> 命令将当前的目录转化为 <code>Git</code> 仓库</p><p><code>git init</code> 命令会创建一个名为 .git 的隐藏目录，<strong>这个 .git 目录就是当前项目的 Git 仓库</strong>，里面包含了<strong>初始的必要文件</strong>，这些文件是 Git 仓库的<strong>必要组成部分</strong></p><h3 id="检查文件的状态-⭐⭐⭐"><a href="#检查文件的状态-⭐⭐⭐" class="headerlink" title="检查文件的状态(⭐⭐⭐)"></a>检查文件的状态(⭐⭐⭐)</h3><p>可以使用 <code>git status</code> 命令查看文件处于什么状态</p><p>在状态报告中可以看到新建的 <code>index.html</code> 文件出现在 <code>Untracked files</code>（未跟踪的文件） 下面。</p><p>未跟踪的文件意味着 <strong><code>Git</code> 在之前的快照（提交）中没有这些文件</strong>；<code>Git</code> 不会自动将之纳入跟踪范围，除非明确</p><p>地告诉它“我需要使用 Git 跟踪管理该文件”。</p><h3 id="以精简的方式显示文件状态"><a href="#以精简的方式显示文件状态" class="headerlink" title="以精简的方式显示文件状态"></a>以精简的方式显示文件状态</h3><p>使用 <code>git status</code> 输出的状态报告很详细，但有些繁琐。如果希望以精简的方式显示文件的状态，可以使用如下</p><p>两条完全等价的命令，其中 <strong>-s</strong> 是 <strong>–short</strong> 的简写形式：</p><pre class=" language-shell"><code class="language-shell"># 以精简的方式显示文件状态git status -sgit status --short</code></pre><p>未跟踪文件前面有红色的 <strong>??</strong> 标记</p><h3 id="跟踪新文件-⭐⭐⭐"><a href="#跟踪新文件-⭐⭐⭐" class="headerlink" title="跟踪新文件(⭐⭐⭐)"></a>跟踪新文件(⭐⭐⭐)</h3><p>使用命令 <code>git add</code> 开始跟踪一个文件。 所以，要跟踪 <code>index.html</code> 文件，运行如下的命令即可：</p><pre class=" language-shell"><code class="language-shell">git add index.html# 如果文件过多，你想跟踪目录下所有文件git add *.*</code></pre><p>此时再运行 <code>git status</code> 命令，会看到 <code>index.html</code> 文件在 <code>Changes to be committed</code> 这行的下面，说明已被跟踪，并处于暂存状态：</p><h3 id="提交更新-⭐⭐⭐"><a href="#提交更新-⭐⭐⭐" class="headerlink" title="提交更新(⭐⭐⭐)"></a>提交更新(⭐⭐⭐)</h3><p>现在暂存区中有一个 <code>index.html</code> 文件等待被提交到 <code>Git</code> 仓库中进行保存。可以执行 <code>git commit</code> 命令进行提交,其中 <code>-m</code> 选项后面是本次的提交消息，用来对提交的内容做进一步的描述：</p><pre class=" language-shell"><code class="language-shell">git commit -m "新建了index.html 文件"</code></pre><p>提交成功之后，再次检查文件的状态</p><h3 id="对已提交的文件进行修改"><a href="#对已提交的文件进行修改" class="headerlink" title="对已提交的文件进行修改"></a>对已提交的文件进行修改</h3><p>目前，<code>index.html</code> 文件已经被 <code>Git</code> 跟踪，并且工作区和 <code>Git</code> 仓库中的 <code>index.html</code> 文件内容保持一致。当我们修改了工作区中 <code>index.html</code> 的内容之后，再次运行 <code>git status</code> 和 <code>git status -s</code> 命令</p><p>文件 <code>index.html</code> 出现在 <code>Changes not staged for commit</code> 这行下面，说明<strong>已跟踪文件的内容发生了变化，但还没有放到暂存区</strong>。</p><p><strong>注意：</strong>修改过的、没有放入暂存区的文件前面有红色的 <strong>M</strong> 标记。</p><h3 id="暂存已修改的文件"><a href="#暂存已修改的文件" class="headerlink" title="暂存已修改的文件"></a>暂存已修改的文件</h3><p>目前，工作区中的 <code>index.html</code> 文件已被修改，如果要暂存这次修改，需要再次运行 <code>git add</code> 命令，这个命令是个多功能的命令，主要有如下 3 个功效：</p><p>① 可以用它<strong>开始跟踪新文件</strong></p><p>② 把<strong>已跟踪的</strong>、<strong>且已修改</strong>的文件放到暂存区</p><p>③ 把有冲突的文件标记为已解决状态</p><h3 id="提交已暂存的文件"><a href="#提交已暂存的文件" class="headerlink" title="提交已暂存的文件"></a>提交已暂存的文件</h3><p>再次运行 <code>git commit -m "提交消息"</code> 命令，即可将暂存区中记录的 <code>index.html</code> 的快照，提交到 <code>Git</code> 仓库中进行保存</p><h3 id="撤销对文件的修改"><a href="#撤销对文件的修改" class="headerlink" title="撤销对文件的修改"></a>撤销对文件的修改</h3><p><strong>撤销对文件的修改指的是：</strong>把对工作区中对应文件的修改，<strong>还原</strong>成 Git 仓库中所保存的版本。</p><p><strong>操作的结果：</strong>所有的修改会丢失，且无法恢复！<strong>危险性比较高，请慎重操作！</strong></p><p><strong>撤销操作的本质：</strong>用 Git 仓库中保存的文件，覆盖工作区中指定的文件。</p><h3 id="向暂存区中一次性添加多个文件"><a href="#向暂存区中一次性添加多个文件" class="headerlink" title="向暂存区中一次性添加多个文件"></a>向暂存区中一次性添加多个文件</h3><p>如果需要被暂存的文件个数比较多，可以使用如下的命令，一次性将所有的新增和修改过的文件加入暂存区：</p><pre class=" language-shell"><code class="language-shell">git add .</code></pre><p><strong>今后在项目开发中，会经常使用这个命令，将新增和修改过后的文件加入暂存区</strong></p><h3 id="取消暂存的文件"><a href="#取消暂存的文件" class="headerlink" title="取消暂存的文件"></a>取消暂存的文件</h3><p>如果需要从暂存区中移除对应的文件，可以使用如下的命令：</p><pre class=" language-shell"><code class="language-shell">git reset HEAD 要移出的文件名称</code></pre><h3 id="跳过使用暂存区域"><a href="#跳过使用暂存区域" class="headerlink" title="跳过使用暂存区域"></a>跳过使用暂存区域</h3><p><code>Git</code> 标准的工作流程是<code>工作区 → 暂存区 → Git 仓库</code>，但有时候这么做略显繁琐，此时可以跳过暂存区，直接将工作区中的修改提交到 <code>Git</code> 仓库，这时候 <code>Git</code> 工作的流程简化为了<code>工作区 → Git 仓库</code></p><p><code>Git</code> 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 <code>git commit</code> 加上 <code>-a</code> 选项，<code>Git</code> 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤：</p><pre class=" language-shell"><code class="language-shell">git commit -a -m "日志信息"</code></pre><h3 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h3><p>从 Git 仓库中移除文件的方式有两种：</p><p>① 从 Git 仓库和工作区中<strong>同时移除</strong>对应的文件</p><p>② 只从 Git 仓库中移除指定的文件，但保留工作区中对应的文件</p><pre class=" language-shell"><code class="language-shell"># 从 Git仓库和工作区中同时移除 index.js 文件git rm -f index.js# 只从 Git 仓库中移除 index.css，但保留工作区中的 index.css 文件git rm --cached index.css</code></pre><h3 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h3><p>一般我们总会有些文件无需纳入 <code>Git</code> 的管理，也不希望它们总出现在未跟踪文件列表。 在这种情况下，我们可以创建一个名为 <code>.gitignore</code> 的配置文件，列出要忽略的文件的匹配模式。</p><p>文件 <code>.gitignore</code> 的格式规范如下：</p><p>① 以 <strong># 开头</strong>的是注释</p><p>② 以 <strong>/ 结尾</strong>的是目录</p><p>③ 以 <strong>/ 开头</strong>防止递归</p><p>④ 以 <strong>! 开头</strong>表示取反</p><p>⑤ 可以使用 <strong>glob 模式</strong>进行文件和文件夹的匹配（glob 指简化了的正则表达式）</p><ul><li><strong>星号 *</strong> 匹配<strong>零个或多个任意字符</strong></li><li><strong><code>[abc]</code></strong> 匹配<strong>任何一个列在方括号中的字符</strong> （此案例匹配一个 a 或匹配一个 b 或匹配一个 c）</li><li><strong>问号 ?</strong> 只匹配<strong>一个任意字符</strong></li><li><strong>两个星号 **</strong> 表示匹配<strong>任意中间目录</strong>（比如 a/**/z 可以匹配 a/z 、 a/b/z 或 a/b/c/z 等）</li><li>在方括号中使用<strong>短划线</strong>分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）</li></ul><h3 id="gitignore-文件的例子"><a href="#gitignore-文件的例子" class="headerlink" title=".gitignore 文件的例子"></a><code>.gitignore</code> <strong>文件的例子</strong></h3><pre><code># 忽略所有的 .a 文件*.a# 但跟踪所有的 lib.a, 即便你在前面忽略了 .a 文件!lib.a# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO/TODO# 忽略任何目录下名为 build 的文件夹build/# 忽略 doc/notes.txt,但不忽略 doc/server/arch.txtdoc/*.txt# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件doc/**/*.pdf</code></pre><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><p>如果希望回顾项目的提交历史，可以使用 <code>git log</code> 这个简单且有效的命令</p><pre class=" language-shell"><code class="language-shell"># 按时间先后顺序列出所有的提交历史，最近的提交在最上面git log# 只展示最新的两条提交历史，数字可以按需进行填写git log -2# 在一行上展示最近两条提交历史的信息git log -2 --pretty=oneline# 在一行上展示最近两条提交历史信息，并自定义输出的格式# &h 提交的简写哈希值  %an 作者名字  %ar 作者修订日志  %s 提交说明git log -2 --pretty=format:"%h | %an | %ar | %s"</code></pre><h3 id="回退到指定的版本"><a href="#回退到指定的版本" class="headerlink" title="回退到指定的版本"></a>回退到指定的版本</h3><pre class=" language-shell"><code class="language-shell"># 在一行上展示所有的提交历史git log --pretty=oneline# 使用 git reset --hard 命令，根据指定的提交 ID 回退到指定版本git reset --hard <CommitID># 在旧版本中使用 git reflog --pretty=oneline 命令，查看命令操作的历史git reflog --pretty=onelone# 再次根据最新的提交 ID，跳转到最新的版本git reset --hard <CommitID></code></pre>]]></content>
      
      
      <categories>
          
          <category> 安装配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
